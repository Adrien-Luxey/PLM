# French translations for PACKAGE package
# Copyright (C) 2009 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2009.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2009-02-13 22:23+0100\n"
"PO-Revision-Date: 2009-02-13 22:26+0100\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: src/universe/sort/SortingWorld.html:1
msgid "Sorting World"
msgstr "Sorting World "

#: src/universe/sort/SortingWorld.html:2
msgid ""
"Ce monde vous donne les outils pour expérimenter les algorithmes de tris. On "
"peut l'utiliser de deux manières différentes : la première est bien sûr "
"d'écrire les algorithmes de tri demandés. Mais on peut aussi se contenter "
"dans un premier temps de lancer la démo de chaque exercice et observer les "
"algorithmes de tri fonctionner. Cela permet de mieux se rendre compte des "
"différences d'efficacité entre eux."
msgstr ""
"This world provides tools to experiment with the sorting algorithms. It can "
"be used in two different ways: the first one is naturally to write the "
"required sorting algorithms. But it is also possible to simply use the demo "
"mode of each exercise to observe the behaviour of sorting algorithms. It "
"helps understanding the differences between each of them."

#: src/universe/sort/SortingWorld.html:7
msgid "Méthodes disponibles pour les algorithmes de tri"
msgstr "Methods available to sorting algorithms"

#: src/universe/sort/SortingWorld.html:9
msgid "int getValueCount()"
msgstr "int getValueCount()"

#: src/universe/sort/SortingWorld.html:9
msgid "Retourne le nombre de valeurs dans le tableau"
msgstr "Returns the amount of values in the array"

#: src/universe/sort/SortingWorld.html:11
msgid "boolean compare(int i, int j)"
msgstr "boolean compare(int i, int j)"

#: src/universe/sort/SortingWorld.html:11
msgid ""
"Retourne vrai ssi le contenu de la case i est inférieur à celui de la case j"
msgstr ""
"Returns true if the content of cell i is smaller than the one of cell j"

#: src/universe/sort/SortingWorld.html:12
msgid "boolean compareTo(int i, int val)"
msgstr "boolean compareTo(int i, int val)"

#: src/universe/sort/SortingWorld.html:12
msgid "Retourne vrai ssi le contenu de la case i est inférieur à la valeur val"
msgstr "Returns true if the content of cell i is smaller than value val"

#: src/universe/sort/SortingWorld.html:14
msgid "void swap(int i, int j)"
msgstr "void swap(int i, int j)"

#: src/universe/sort/SortingWorld.html:14
msgid "Inverse le contenu de la case i et celui de la case j"
msgstr "Swaps the content of cell i and the one of cell j"

#: src/universe/sort/SortingWorld.html:15
msgid "void copy(int from, int to)"
msgstr "void copy(int from, int to)"

#: src/universe/sort/SortingWorld.html:15
msgid "Recopie le contenu de la case from dans la case to"
msgstr "Copy the content of cell 'from' into the cell 'to'"

#: src/universe/sort/SortingWorld.html:17
msgid "int getValue(int idx)"
msgstr "int getValue(int idx)"

#: src/universe/sort/SortingWorld.html:17
msgid "Retourne la valeur de la case idx"
msgstr "Returns the value of cell idx"

#: src/universe/sort/SortingWorld.html:18
msgid "void setValue(int idx,int val)"
msgstr "void setValue(int idx,int val)"

#: src/universe/sort/SortingWorld.html:18
msgid "Affecte la valeur val à la case idx"
msgstr "Sets cell 'idx' to the value 'val' "

#: src/universe/sort/SortingWorld.html:20
msgid "void sorted(int idx)"
msgstr "void sorted(int idx)"

#: src/universe/sort/SortingWorld.html:20
msgid "Indique que la case idx est triée (pour l'affichage)"
msgstr ""
"Tells that the cell 'idx' was successfully sorted (only used for display)"

#: src/universe/turtles/TurtleWorld.html:1
msgid "TurtleWorld"
msgstr "TurtleWorld"

#: src/universe/turtles/TurtleWorld.html:2
msgid ""
"Ce monde est directement inspiré des travaux du mathématicien Seymour Papert "
"dans les années 60. Inspiré par le psychologue suisse Jean Piaget, il a "
"inventé une méthode d'apprentissage de la programmation accessible aux "
"jeunes enfants nommée LOGO. Le monde est peuplé de tortues qui laissent une "
"trace là où elles marchent et à qui on peut donner des ordres simples."
msgstr ""
"This world is directly inspired from the work of the mathematician Seymour "
"Papert in the 60's. Inspirated from the swiss psycholog Jean Piaget, he came "
"up with a learning method called LOGO to teach programming to young childs. "
"The world is full of turtles which leave a painting where they go and which "
"respond to simple orders."

#: src/universe/turtles/TurtleWorld.html:7
msgid ""
"Le TurtleWorld est une adaptation de LOGO pour la Java Learning Machine."
msgstr "This world is an adaptation of LOGO for the Java Learning Machine."

#: src/universe/turtles/TurtleWorld.html:9
msgid "Méthodes comprises par les tortues"
msgstr "Methods understood by turtles"

#: src/universe/turtles/TurtleWorld.html:12
msgid "<b>Avancer</b> <code>public void forward(double nbPas);</code>"
msgstr ""
"<b>Moving forward</b> <code>public void forward(double stepAmount);</code>"

#: src/universe/turtles/TurtleWorld.html:13
msgid "<b>Reculer</b> <code>public void backward(double nbPas);</code>"
msgstr ""
"<b>Moving backward</b> <code>public void backward(double stepAmount);</code>"

#: src/universe/turtles/TurtleWorld.html:14
msgid ""
"<b>Tourner à gauche</b> <code>public void turnLeft(double angle);</code> (en "
"degrés)"
msgstr ""
"<b>Turn left</b> <code>public void turnLeft(double angle);</code> (in degree)"

#: src/universe/turtles/TurtleWorld.html:15
msgid ""
"<b>Tourner à droite</b> <code>public void turnRight(double angle);</code>"
msgstr "<b>Turn right</b> <code>public void turnRight(double angle);</code>"

#: src/universe/turtles/TurtleWorld.html:16
msgid "<b>Lever stylo</b> <code>public void penUp();</code>"
msgstr "<b>Pen up</b> <code>public void penUp();</code>"

#: src/universe/turtles/TurtleWorld.html:17
msgid "<b>Baisser stylo</b> <code>public void penDown();</code>"
msgstr "<b>Pen down</b> <code>public void penDown();</code>"

#: src/universe/turtles/TurtleWorld.html:18
msgid "<b>Obtenir position stylo</b> <code>public boolean isPenDown();</code>"
msgstr "<b>Get pen position</b> <code>public boolean isPenDown();</code>"

#: src/universe/turtles/TurtleWorld.html:19
msgid "(les tortues ont des stylos, pas des brosses comme les buggles)"
msgstr "(turtles have pens, not brushes as buggles)"

#: src/universe/turtles/TurtleWorld.html:20
msgid "<b>Obtenir direction</b> <code>public double getHeading();</code>"
msgstr "<b>Get heading</b> <code>public double getHeading();</code>"

#: src/universe/turtles/TurtleWorld.html:21
msgid ""
"<b>Changer direction</b> <code>public void setHeading(double angle);</code>"
msgstr ""
"<b>Change heading</b> <code>public void setHeading(double angle);</code>"

#: src/universe/turtles/TurtleWorld.html:22
msgid "<b>Obtenir couleur</b> <code>public Color getColor();</code>"
msgstr "<b>Get color</b> <code>public Color getColor();</code>"

#: src/universe/turtles/TurtleWorld.html:23
msgid "<b>Changer couleur</b> <code>public void setColor(Color color);</code>"
msgstr "<b>Set color</b> <code>public void setColor(Color color);</code>"

#: src/universe/turtles/TurtleWorld.html:24
msgid ""
"<b>Obtenir position</b> <code>public double getX();</code> <code>public "
"double getY();</code>"
msgstr ""
"<b>Get position</b> <code>public double getX();</code> <code>public double "
"getY();</code>"

#: src/universe/turtles/TurtleWorld.html:26
msgid ""
"<b>Changer position</b> <code>public void setX(double x);</code> \t "
"<code>public void setY(double y);</code> <code>public void setPos(double x, "
"double y);</code>"
msgstr ""
"<b>Set position</b> <code>public void setX(double x);</code> \t <code>public "
"void setY(double y);</code> <code>public void setPos(double x, double y);</"
"code>"

#: src/universe/bugglequest/BuggleWorld.html:1
msgid "BuggleWorld"
msgstr "BuggleWorld"

#: src/universe/bugglequest/BuggleWorld.html:2
msgid ""
"Ce monde a été inventé par Lyn Turbak, du Wellesley College. Il est peuplé "
"de Buggles, petites bêtes qui comprennent des ordres simples, et offre de "
"nombreuses possibilités d'interaction avec le monde: prendre ou poser des "
"objets, colorier le sol, se cogner à des murs, etc."
msgstr ""
"This world was invented by Lyn Turbak, at Wellesley College. It is full of "
"Buggles, little animals understanding simple orders, and offers numerous "
"possibilities of interaction with the world: taking or dropping objects, "
"paint the ground, hit walls, etc."

#: src/universe/bugglequest/BuggleWorld.html:8
msgid "Méthodes comprises par les buggles"
msgstr "Methods understood by buggles"

#: src/universe/bugglequest/BuggleWorld.html:10
msgid "<b>Bouger</b>"
msgstr "<b>Moving</b>"

#: src/universe/bugglequest/BuggleWorld.html:10
msgid "(voir aussi la note sur les exceptions, plus bas)"
msgstr "(See also the note on exceptions, below)"

#: src/universe/bugglequest/BuggleWorld.html:11
msgid "<b>Tourner à gauche"
msgstr "<b>Turn left"

#: src/universe/bugglequest/BuggleWorld.html:11
msgid "Tourner à droite"
msgstr "Turn right"

#: src/universe/bugglequest/BuggleWorld.html:11
msgid "Se retourner"
msgstr "Turn back"

#: src/universe/bugglequest/BuggleWorld.html:11
msgid "Avancer"
msgstr "Moving forward"

#: src/universe/bugglequest/BuggleWorld.html:11
msgid "Reculer</b>"
msgstr "Moving back</b>"

#: src/universe/bugglequest/BuggleWorld.html:12
msgid "void turnLeft();"
msgstr "void turnLeft();"

#: src/universe/bugglequest/BuggleWorld.html:12
msgid "void turnRight()"
msgstr "void turnRight()"

#: src/universe/bugglequest/BuggleWorld.html:12
msgid "void turnBack()"
msgstr "void turnBack()"

#: src/universe/bugglequest/BuggleWorld.html:13
msgid "void forward() ou void forward(int)"
msgstr "void forward() or void forward(int)"

#: src/universe/bugglequest/BuggleWorld.html:13
msgid "void backward() ou void backward(int)"
msgstr "void backward() or void backward(int)"

#: src/universe/bugglequest/BuggleWorld.html:14
msgid "<b>Obtenir l'abcisse"
msgstr "<b>Get X coordinate"

#: src/universe/bugglequest/BuggleWorld.html:14
msgid "Obtenir l'ordonnée"
msgstr "Get Y coordinate"

#: src/universe/bugglequest/BuggleWorld.html:14
msgid "Changer l'abcisse"
msgstr "Set X coordinate"

#: src/universe/bugglequest/BuggleWorld.html:14
msgid "Changer l'ordonnée"
msgstr "Set Y coordinate"

#: src/universe/bugglequest/BuggleWorld.html:14
msgid "Changer la position</b>"
msgstr "Set position</b>"

#: src/universe/bugglequest/BuggleWorld.html:15
msgid "int getX();"
msgstr "int getX();"

#: src/universe/bugglequest/BuggleWorld.html:15
msgid "int getY()"
msgstr "int getY()"

#: src/universe/bugglequest/BuggleWorld.html:15
msgid "void setX(int)"
msgstr "void setX(int)"

#: src/universe/bugglequest/BuggleWorld.html:15
msgid "void setY(int)"
msgstr "void setY(int)"

#: src/universe/bugglequest/BuggleWorld.html:15
msgid "void setPos(int,int)"
msgstr "void setPos(int,int)"

#: src/universe/bugglequest/BuggleWorld.html:17
msgid "<b>Informations sur la buggle</b>"
msgstr "<b>Information on the buggle</b>"

#: src/universe/bugglequest/BuggleWorld.html:18
msgid "<b>Obtenir la couleur"
msgstr "<b>Get the color"

#: src/universe/bugglequest/BuggleWorld.html:18
msgid "Changer la couleur</b>"
msgstr "Set the color</b>"

#: src/universe/bugglequest/BuggleWorld.html:19
msgid "Color getColor();"
msgstr "Color getColor();"

#: src/universe/bugglequest/BuggleWorld.html:19
msgid "void setColor(Color)"
msgstr "void setColor(Color)"

#: src/universe/bugglequest/BuggleWorld.html:20
msgid "<b>Chercher un mur devant"
msgstr "<b>Look for a wall forward"

#: src/universe/bugglequest/BuggleWorld.html:20
msgid "Chercher un mur derriere</b>"
msgstr "Look for a wall backward</b>"

#: src/universe/bugglequest/BuggleWorld.html:21
msgid "boolean isFacingWall();"
msgstr "boolean isFacingWall();"

#: src/universe/bugglequest/BuggleWorld.html:21
msgid "boolean isBackingWall()"
msgstr "boolean isBackingWall()"

#: src/universe/bugglequest/BuggleWorld.html:22
msgid "<b>Obtenir la direction"
msgstr "<b>Get heading"

#: src/universe/bugglequest/BuggleWorld.html:22
msgid "Changer la direction</b>"
msgstr "Set heading</b>"

#: src/universe/bugglequest/BuggleWorld.html:23
msgid "Direction getDirection();"
msgstr "Direction getDirection();"

#: src/universe/bugglequest/BuggleWorld.html:23
msgid "void setDirection(Direction)"
msgstr "void setDirection(Direction)"

#: src/universe/bugglequest/BuggleWorld.html:25
msgid "<b>À propos de la brosse</b>"
msgstr "<b>About the brush</b>"

#: src/universe/bugglequest/BuggleWorld.html:26
msgid "<b>Baisser la brosse"
msgstr "<b>Brush down"

#: src/universe/bugglequest/BuggleWorld.html:26
msgid "Lever la brosse"
msgstr "Brush up"

#: src/universe/bugglequest/BuggleWorld.html:26
msgid "Obtenir la position de la brosse</b>"
msgstr "Get brush position</b>"

#: src/universe/bugglequest/BuggleWorld.html:27
msgid "void brushUp();"
msgstr "void brushUp();"

#: src/universe/bugglequest/BuggleWorld.html:27
msgid "void brushDown();"
msgstr "void brushDown();"

#: src/universe/bugglequest/BuggleWorld.html:27
msgid "boolean isBrushDown();"
msgstr "boolean isBrushDown();"

#: src/universe/bugglequest/BuggleWorld.html:28
msgid "<b>Modifier la couleur de la brosse"
msgstr "<b>Change the brush color"

#: src/universe/bugglequest/BuggleWorld.html:28
msgid "Obtenir la couleur de la brosse</b>"
msgstr "Get the color of the brush</b>"

#: src/universe/bugglequest/BuggleWorld.html:29
msgid "void setBrushColor(Color);"
msgstr "void setBrushColor(Color);"

#: src/universe/bugglequest/BuggleWorld.html:29
msgid "Color getBrushColor();"
msgstr "Color getBrushColor();"

#: src/universe/bugglequest/BuggleWorld.html:31
msgid "<b>Interagir avec le monde</b>"
msgstr "<b>Interacting with the world</b>"

#: src/universe/bugglequest/BuggleWorld.html:32
msgid "<b>Obtenir la couleur du sol</b>"
msgstr "<b>Get the color of the ground</b>"

#: src/universe/bugglequest/BuggleWorld.html:32
msgid "Color getGroundColor();"
msgstr "Color getGroundColor();"

#: src/universe/bugglequest/BuggleWorld.html:34
msgid "<b>Chercher un baggle par terre"
msgstr "Look for a baggle on the ground"

#: src/universe/bugglequest/BuggleWorld.html:34
msgid "Chercher un baggle dans ses poches"
msgstr "Look for a baggle in bag"

#: src/universe/bugglequest/BuggleWorld.html:34
msgid "Prendre un baggle"
msgstr "Pickup a baggle"

#: src/universe/bugglequest/BuggleWorld.html:34
msgid "Poser un baggle</b>"
msgstr "Drop a baggle</b>"

#: src/universe/bugglequest/BuggleWorld.html:35
msgid "(voir la note sur les exceptions)"
msgstr "(see the note on exceptions)"

#: src/universe/bugglequest/BuggleWorld.html:36
msgid "boolean isOverBaggle();"
msgstr "boolean isOverBaggle();"

#: src/universe/bugglequest/BuggleWorld.html:36
msgid "boolean isCarryingBaggle();"
msgstr "boolean isCarryingBaggle();"

#: src/universe/bugglequest/BuggleWorld.html:36
msgid "void pickupBaggle()"
msgstr "void pickupBaggle()"

#: src/universe/bugglequest/BuggleWorld.html:36
msgid "void dropBaggle()"
msgstr "void dropBaggle()"

#: src/universe/bugglequest/BuggleWorld.html:38
msgid "<b>Chercher un message"
msgstr "<b>Look for a message"

#: src/universe/bugglequest/BuggleWorld.html:38
msgid "Ajouter un message"
msgstr "Add a message"

#: src/universe/bugglequest/BuggleWorld.html:38
msgid "Lire le message"
msgstr "Read the message"

#: src/universe/bugglequest/BuggleWorld.html:38
msgid "Effacer le message</b>"
msgstr "Erase the message"

#: src/universe/bugglequest/BuggleWorld.html:39
msgid "boolean isOverMessage();"
msgstr "boolean isOverMessage();"

#: src/universe/bugglequest/BuggleWorld.html:39
msgid "void writeMessage(String);"
msgstr "void writeMessage(String);"

#: src/universe/bugglequest/BuggleWorld.html:39
msgid "String readMessage()"
msgstr "String readMessage()"

#: src/universe/bugglequest/BuggleWorld.html:39
msgid "void clearMessage()"
msgstr "void clearMessage()"

#: src/universe/bugglequest/BuggleWorld.html:42
msgid "Note sur les exceptions"
msgstr "Note on exceptions"

#: src/universe/bugglequest/BuggleWorld.html:43
msgid ""
"Les buggles normales lèvent une exception BuggleWallException si on cherche "
"à leur faire traverser un mur.  Elles lèvent une exception "
"NoBaggleUnderBuggleException si vous cherchez à prendre un baggle dans une "
"case qui n'en contient pas, ou une exception AlreadyHaveBaggleException si "
"vous portez déjà un baggle.  Tenter de déposer un baggle sur une case qui en "
"contient déjà lève une exception AlreadyHaveBaggleException."
msgstr ""
"Regular buggles throw a BuggleWallException exception if you ask them to "
"traverse a wall.  They throw a NoBaggleUnderBuggleException exception if you "
"ask them to pickup a baggle from an empty cell, or a "
"AlreadyHaveBaggleException exception if they already carry a baggle.  Trying "
"to drop a baggel on a cell already containing one throws an "
"AlreadyHaveBaggleException exception."

#: src/universe/bugglequest/BuggleWorld.html:47
msgid ""
"Les SimpleBuggles (ie, celles utilisées dans les premiers exercices) affiche "
"un message d'erreur sans que vous ayez à vous soucier de ce qu'est une "
"exception."
msgstr ""
"SimpleBuggles (ie, the one used in first exercises) display an error message "
"on problem so that you don't need to know what an exception is."

#: src/lessons/sort/Main.html:1
msgid "Algorithmes de tri"
msgstr "Sorting Algorithms"

#: src/lessons/sort/Main.html:3
msgid ""
"Cette leçon vous permet d'expérimenter avec les algorithmes de tri "
"classiques (et certaines optimisations moins courantes de ceux-ci). "
"L'objectif est double: il s'agit tout d'abord de mieux comprendre le "
"principe de ces algorithmes en les codant vous-même.  Mais même si vous ne "
"codez pas les algorithmes, vous pouvez utiliser le mode démo pour organiser "
"des \\\"courses\\\" entre ces algorithmes afin d'expérimenter en pratique ce "
"qu'implique la différence de complexité asymptotique entre deux algorithmes."
msgstr ""
"This lesson allows to experiment with some classical sorting algorithms (and "
"some less common variante of them). The goal is two fold: you can first "
"better understand the idea of these algorithms by writting them yourself. "
"But even if you don't code the algorithms, you can use the demo mode to "
"organize \"races\" between these algorithms to experiment in practice what "
"the different asymptotical complexity mean."

#: src/lessons/sort/Main.html:10
msgid ""
"Un exercice sur les tris récursifs (en particulier QuickSort et MergeSort) "
"est prévu à l'avenir."
msgstr ""
"An exercise on recursive sorting algorithms (such as QuickSort and "
"MergeSort) is planned for the future."

#: src/lessons/sort/ExSelectionSort.html:1
msgid "Tri par selection"
msgstr "Selection Sort"

#: src/lessons/sort/ExSelectionSort.html:3
msgid ""
"Cet exercice est l'occasion d'implémenter un autre algorithme très "
"classique : le tri par sélection."
msgstr ""
"In this exercise we will implement another classical algorithm: selection "
"sort."

#: src/lessons/sort/ExSelectionSort.html:5
msgid ""
"Son principe est simplement de sélectioner pour chaque case du tableau la "
"plus petite valeur de la partie pas encore triée. Ainsi, pour la premiere "
"case, je prend la plus petite valeur du tableau. Pour la seconde, je prend "
"la seconde plus petite valeur, qui se trouve être la plus petite des cases "
"n'étant pas encore triées."
msgstr ""
"The idea is simply to select for each cell of the array the smallest value "
"from the part not already sorted. Thus for the first cell, it takes the "
"smallest value over the whole array. For the second one, it takes the second "
"smallest value, which is the smallest value from the cell not already sorted."

#: src/lessons/sort/ExSelectionSort.html:9
msgid ""
"Plus généralement, pour la case N, je cherche la case M de [n;lgr] contenant "
"la plus petite valeur possible. Ensuite, j'inverse le contenu de la case N "
"et celui de la case M."
msgstr ""
"More generally, for the cell N, it looks the cell M in [n;len] containing "
"the smallest possible value of the interval. Then, it swaps the content of "
"cell N with the one of cell M."

#: src/lessons/sort/ExSelectionSort.html:12
msgid "Variantes possibles"
msgstr "Existing variations"

#: src/lessons/sort/ExSelectionSort.html:13
msgid ""
"Un autre algorithme classique dont le principe repose sur la sélection des "
"bons éléments est le tri par tas, mais il utilise une structure de données "
"en tas, que nous n'avons pas encore introduite. Sachez simplement que ce tri "
"présente un coût en O(n log n) dans le pire des cas, ce qui en fait un "
"algorithme très intéressant en pratique."
msgstr ""
"Another classical algorithm which idea is based on the selection of good "
"elements is HeapSort, but it uses a heap data structure which we did not see "
"yet. Simply remember that HeapSort provides a O(n log n) performance in "
"worst case, which is why it is a very interesting algorithm in practice."

#: src/lessons/sort/ExInsertionSort.html:1
msgid "Algorithme par insertion et variantes"
msgstr "Insertion algorithms and variations"

#: src/lessons/sort/ExInsertionSort.html:3
msgid ""
"Cet exercice vous permet d'expérimenter avec le tri par insertion et ses "
"variantes les plus classiques."
msgstr ""
"This exercise allows you to experiment with the insertion sort and its major "
"variations."

#: src/lessons/sort/ExInsertionSort.html:4
msgid "InsertionSort"
msgstr "InsertionSort"

#: src/lessons/sort/ExInsertionSort.html:5
msgid ""
"Ce tri est relativement simple à comprendre et à écrire, même s'il n'offre "
"pas les meilleures performances possibles.  Il s'agit d'un algorithme "
"quadratique (complexité asymptotique en O(n2)), mais il est plus efficace en "
"pratique (linéaire dans le meilleur des cas, ie quand le tableau déjà trié "
"et N2/4 en moyenne)."
msgstr ""
"This sorting algorithm is quite simple to understand and write, even if it "
"is not as efficient as possible. Its asymptotic complexity is in O(n2), but "
"it is more efficient in practice (linear in best case, ie when the array is "
"already sorted, and N2/4 on average)."

#: src/lessons/sort/ExInsertionSort.html:8
msgid ""
"L'idée est de parcourir tous les éléments du tableau, et d'insérer chacun à "
"sa place dans la partie du tableau déjà trié.  Lorsque l'on regarde un "
"élément x du tableau, on est dans la situation suivante : tous les éléments "
"à gauche du tableau sont déjà triés, et il faut insérer x à sa place dans le "
"tableau."
msgstr ""
"The idea is to traverse all elements of the array, and to insert each of "
"them into its proper position in the already sorted part of the array. When "
"we look at an element x, the situation is the following: any elements to the "
"left of the array are already sorted, and we have to insert x at its "
"position in the array."

#: src/lessons/sort/ExInsertionSort.html:13
msgid "Une fois ceci fait, on se retrouve dans la situation suivante:"
msgstr "Once this is done, the situation is the following:"

#: src/lessons/sort/ExInsertionSort.html:16
#: src/lessons/sort/ExExchangeSort.html:22
msgid "Le pseudo-code de cet algorithme est donc le suivant :"
msgstr "The pseudo-code of this algorithm is thus the following:"

#: src/lessons/sort/ExInsertionSort.html:17
#, no-wrap
msgid ""
"Pour tout i dans [1,lgr]\n"
"  stoquer la valeur de la case i dans une variable val\n"
"  recopier la case i-1 dans i, si i-1 contient une valeur plus grande que val\n"
"  recopier la case i-2 dans i-1, si i-2 contient une valeur plus grande que val  \n"
"  recopier la case i-3 dans i-2, si i-3 contient une valeur plus grande que val  \n"
"  recopier la case i-4 dans i-3, si i-4 contient une valeur plus grande que val\n"
"  ...\n"
"  recopier val dans la dernière case recopiée plus haut\n"
msgstr ""
"For each i in [1,len]\n"
"  store the value of i in a variable val\n"
"  copy the cell i-1 into i if i-1 contains a value bigger than val\n"
"  copy the cell i-2 into i-1 if i-2 contains a value bigger than val\n"
"  copy the cell i-3 into i-2 if i-3 contains a value bigger than val\n"
"  copy the cell i-4 into i-3 if i-4 contains a value bigger than val\n"
"  ...\n"
"  copy val into the last cell copied above\n"

#: src/lessons/sort/ExInsertionSort.html:27
msgid ""
"Bien entendu, il faut utiliser une boucle pour écrire la grosse permutation "
"circulaire au coeur de la boucle.  L'écrire explicitement de la sorte serait "
"vraiment ... contre-productif."
msgstr ""
"Naturally, you should use a loop to write the big permutation within the "
"given loop. Writing it this way would be really ... counter-productive."

#: src/lessons/sort/ExInsertionSort.html:30
msgid "ShellSort"
msgstr "ShellSort"

#: src/lessons/sort/ExInsertionSort.html:32
msgid ""
"Cet algorithme porte le nom de son auteur, Donald Shell, qui l'a publié en "
"1959. Son principe peut être vu comme une application de l'idée du CombSort "
"(faire prendre des raccourcis aux éléments ayant beaucoup de chemin à faire) "
"au tri par insertion (le CombSort est une variante du tri à bulle).  Au lieu "
"de comparer les valeurs ajacentes lors du tri par insertion, on compare des "
"valeurs séparées par un <i>gap</i> (écartement) plus grand. Plus le gap est "
"grand et plus les éléments sont déplacés rapidement vers leur position "
"finale, mais aussi plus le déplacement est imprécis. Il faut donc appliquer "
"l'algorithme avec une séquence de gaps décroissante vers 1. Ainsi, à la "
"dernière étape quand le gap vaut 1, on applique l'algorithme de tri par "
"insertion de base, mais sur un tableau déjà presque trié par les étapes "
"précédentes."
msgstr ""
"This algorithm is named after its author, Donald Shell, who published it in "
"1959. It can be seen as an application of the CombSort idea (let elements "
"having a long path to travel take shortcuts) to the insertion sort (CombSort "
"is a variation of BubbleSort). Instead of comparing adjacent values during "
"the insertion sort, it compares values separated by a bigger gap. The bigger "
"the gap, the faster the elements are moved to their final destination, but "
"also the less precise is this move. It is thus mandatory to apply the "
"algorithm with a serie of decreasing gaps. At the last step, when the gap is "
"1, InsertionSort is used, but onto an array which is almost already sorted "
"by previous steps."

#: src/lessons/sort/ExInsertionSort.html:42
msgid ""
"Donald Shell propose d'utiliser <code>lgr/2</code> comme première valeur du "
"gap, puis de le diviser par deux à chaque étape.  Le pseudo-code est donc le "
"suivant:"
msgstr ""
"Donald Shell propose <code>len/2</code> as initial value of the gap, and "
"then to divide it by 2 at each step. The pseudo-code is thus the following:"

#: src/lessons/sort/ExInsertionSort.html:45
#, no-wrap
msgid ""
"gap=lgr/2\n"
"tant que gap>0:\n"
"  appliquer l'algorithme de tri par insertion en comparant i-gap et i, puis i-2gap et i-gap, puis i-3gap et i-2gap, etc.\n"
msgstr ""
"gap=len/2\n"
"while gap>0:\n"
"  apply InsertionSort, comparing i-gap and i, then i-2gap and i-gap, then i-3gap and i-2gap, etc.\n"

#: src/lessons/sort/ExInsertionSort.html:50
msgid ""
"Comme dans le cas du CombSort, la séquence des valeurs prises par le gap se "
"révèle être d'une importance capitale pour les performances du tri de Shell. "
"Il existe des cas pathologiques qui font que la séquence que nous avons "
"utilisée ici présente une complexité en O(n^2) dans le pire des cas. "
"D'autres séquences ont été proposé: la séquence des incréments de Hibbard "
"(2^k − 1) permet une complexité dans le pire des cas de O(n^(3/2)), les "
"incréments de Pratt (2^i*3^j) permettent un pire cas en O(n log(n)log(n)).  "
"Ces résultats font du tri de Shell un candidat tout à fait valide pour des "
"instances de tableau de quelques centaines de milliers d'éléments quand il "
"est correctement implémenté."
msgstr ""
"Just like in CombSort, the sequence of values taken by the gap is crucial "
"for Shell sort performance. In some rare pathological cases, the sequence we "
"used above can lead to a O(n^2) performance. Other sequences were proposed: "
"the Hibbard's increments of 2k − 1 lead to a complexity of O(n^(3/2)) in "
"worst cases. Pratt's increments 2^i3^j lead to a O(nlog(n)log(n) performance "
"in worst cases. The existance of a sequence leading to a O(n log(n)) was "
"precluded by Poonen, Plaxton, and Suel. Thanks to this performance, "
"ShellSort is a valid candidate for array of several hundred thousands when "
"correctly implemented."

#: src/lessons/sort/ExInsertionSort.html:57
msgid ""
"Dans notre cas, les instances de tableaux que nous utilisons sont trop "
"petites pour que ces optimisations présentent un réel avantage. Si on "
"voulait le faire, il faudrait prendre en valeur initiale du gap la plus "
"grande valeur de la suite utilisée, puis prendre les valeurs successives en "
"descendant ensuite."
msgstr ""
"In our case, the array are ways too small to benefit of these optimizations. "
"If you ever need to do so, take as initial gap the biggest value of the "
"targeted serie still smaller than the array size, and then use decreasing "
"values of the serie."

#: src/lessons/sort/ExInsertionSort.html:61
msgid ""
"De façon intéressante, déterminer la meilleure séquence de gap pour le shell "
"sort s'avère être un problème de recherche actuel en informatique. Par "
"exemple, un article publié en 2001 propose la suite suivante, qui semble "
"optimale en pratique pour des tailles de tableau allant jusqu'à 10^5: {1, 4, "
"10, 23, 57, 132, 301, 701, 1750} (Marcin Ciura, Best Increments for the "
"Average Case of Shellsort, 13th International Symposium on Fundamentals of "
"Computation Theory, LNCS 2001; Vol. 2138)."
msgstr ""
"Interesingly enough, determining the best gap sequence for shell sort turns "
"into a contemporary research issue in computer science. For example, an "
"article of 2001 introduces the following sequence, which seems to be optimal "
"in practice for arrays of size up to 10^5: {1, 4, 10, 23, 57, 132, 301, 701, "
"1750} (Marcin Ciura, Best Increments for the Average Case of Shellsort, 13th "
"International Symposium on Fundamentals of Computation Theory, LNCS 2001; "
"Vol. 2138)."

#: src/lessons/sort/ExInsertionSort.html:67
msgid ""
"Si vous vous étiez toujours demandé ce que font les chercheurs en "
"informatique à notre époque, voici un élément de réponse: certains d'entre "
"eux améliorent des algorithmes fondamentaux pour permettre à d'autres de "
"faire des programmes efficaces..."
msgstr ""
"If you've always wondered what computer science researchers do nowadays, "
"here is part of the answer: They improve fundamental algorithms so that "
"others can write efficient programs."

#: src/lessons/sort/ExInsertionSort.html:70
msgid "D'autres variantes du tri par insertion"
msgstr "Other variation of insertion sort"

#: src/lessons/sort/ExInsertionSort.html:72
msgid ""
"TreeSort construit un arbre binaire équilibré des données pour les trier. "
"Cela lui permet d'être en O(nlog n) en moyenne (mais O(n^2) dans le pire "
"cas). Nous n'étudierons pas cet algorithme ici puisque comprendre son "
"fonctionnement demande de savoir ce qu'est un arbre binaire, ce qui est au "
"dela de nos objectifs présents."
msgstr ""
"TreeSort builds a binary search tree to sort them. It leads to a O(n log(n)) "
"on average, but O(n^2) in worst cases. We won't study this algorithm here "
"since unterstanding its behavior requires to know what a binary tree is, "
"what is beyond our present goals."

#: src/lessons/sort/ExInsertionSort.html:76
msgid ""
"Il existe d'autres variantes du tri par insertion, comme PatienceSorting, "
"qui fait des paquets des valeurs et trie ensuite chaque paquet. Cet "
"algorithme présente un pire cas en O(nlog n), et une complexité spatiale en O"
"(n).  LibrarySort (proposé en 2004) échange également un peu d'espace pour "
"du temps puisqu'il présente une complexité moyenne en O(n log n), mais "
"nécessite de stoquer des données supplémentaires."
msgstr ""
"There is other variations over the insertion sort, such as PatienceSort "
"which builds piles of values and sort each pile afterward. This algorithm "
"presents a 0(n log(n)) timing worst case and a 0(n) space complexity. "
"LibrarySort (proposed in 2004) also trades a bit space in exchange for time "
"since it provide a time complexity of O(n log(n)) but needs to store some "
"more data."

#: src/lessons/sort/ExInsertionSort.html:81
msgid ""
"Wikipedia (en anglais) propose une description détaillée de tous ces "
"algorithmes que nous n'avons pas le temps de détailler ici."
msgstr ""
"Wikipedia provides a detailled description of all these algorithms we cannot "
"present here because of time constraints."

#: src/lessons/sort/ExExchangeSort.html:1
msgid "Le tri à bulle et variantes"
msgstr "BubbleSort and variations"

#: src/lessons/sort/ExExchangeSort.html:3
msgid ""
"Vous voici dans le monde des tris. Il vous permet d'expérimenter avec les "
"différents algorithmes de tri existant.  Consultez l'aide du monde (\"Help-"
">About this world\") pour une aide sur les primitives utilisables par vos "
"algorithmes."
msgstr ""
"Welcome to the sorting world. It allows you to experiment with the existing "
"sorting algorithms. Please consult the world help (\"Help\"->\"About this "
"world\") for more information on the available buildins for your algorithms."

#: src/lessons/sort/ExExchangeSort.html:6
msgid ""
"Dans ce premier exercice, nous allons voir les plus simples d'entre eux. "
"L'onglet \"Source code\" est composé de plusieurs sous-onglets, "
"correspondant aux différents algorithmes à écrire. Pour réussir l'exercice, "
"il faut que votre solution réalise le même nombre de lectures et écritures "
"que la solution codée dans l'objectif.  Attention donc à suivre le pseudo-"
"code de chaque algorithme à la lettre!"
msgstr ""
"In this first exercise, we will explore some of the simpler of them. The tab "
"\"Source code\" contains several sub-tabs, corresponding to the different "
"algorithms to write. To succeed in this exercise, your solution must sort "
"the array using exactly the same amount of read and write than the solution. "
"That is why you have to follow strictly the pseudo-code of each algorithm."

#: src/lessons/sort/ExExchangeSort.html:11
msgid "BubbleSort"
msgstr "BubbleSort"

#: src/lessons/sort/ExExchangeSort.html:13
msgid ""
"Le tri à bulles ou tri par propagation consiste à faire remonter "
"progressivement les plus petits éléments d'une liste, comme les bulles d'air "
"remontent à la surface d'un liquide. L'algorithme parcourt la liste, et "
"compare les couples d'éléments successifs. Lorsque deux éléments successifs "
"ne sont pas dans l'ordre croissant, ils sont échangés. Après chaque parcours "
"complet de la liste, l'algorithme recommence l'opération. Lorsqu'aucun "
"échange n'a lieu pendant un parcours, cela signifie que la liste est triée : "
"l'algorithme peut s'arrêter.  La simplicité de cet algorithme justifie son "
"étude, mais ses piètres performances (O(n2) en moyenne) font qu'il n'est "
"quasiment jamais utilisé en pratique."
msgstr ""
"Bubble sort consists in progressively moving up the smaller elements of the "
"array, as if they were air bubbles moving up to the surface of a liquid. The "
"algorithm traverse the array, and compare any pair of adjacent elements. If "
"two adjacent elements are wrongly sorted, they are swapped. Once the array "
"was completely traversed, the operation starts again from the begining. When "
"no elements were sorted after a full traversal, it means that the array is "
"completely sorted: the algorithm can stop. Bubble sort is studied because of "
"its simplicity, but it is almost never used in practice because of its bad "
"performance (O(n^2) on average)."

#: src/lessons/sort/ExExchangeSort.html:23
#, no-wrap
msgid ""
"faire: \n"
"        Pour tout i dans [0,lgr-2]\n"
"          Si les cases i et i+1 doivent être inverser, le faire\n"
"     tant qu'on a inverser des choses lors du dernier parcours\n"
msgstr ""
"do: \n"
"        For each i in [0,len-2]\n"
"          If cells i and i+1 must be swapped, do it\n"
"while we swapped something during last traversal\n"

#: src/lessons/sort/ExExchangeSort.html:29
msgid "BubbleSort2"
msgstr "BubbleSort2"

#: src/lessons/sort/ExExchangeSort.html:31
msgid ""
"En étudiant le comportement du tri à bulle, on peut voir une première "
"optimisation facile à effectuer: Après un parcours, le dernier élément du "
"tableau est forcément le plus grand d'entre tous car le parcours l'a fait "
"remonté comme une bulle à sa position. Plus généralement, après N parcours, "
"on sait que les N derniers éléments du tableau sont déjà triés. En "
"conclusion, il n'est pas utile de les recomparer sur les parcours suivants. "
"Dans un premier temps, nous ferons autant de parcours qu'il y a d'éléments "
"dans le tableau. Cela nous donne le pseudo-code suivant :"
msgstr ""
"If you look carefully at the behavior of BubbleSort, a first easy "
"optimisation appears: after one traversal, the last element of the array "
"must be the biggest of all since the traversal moved it up like a bubble to "
"its position. More generally, after N traversal, we know that the N last "
"elements of the array are already sorted. It is thus not necessary to "
"compare them again during the subsequent traversals. For now, we will have "
"as many traversal as there is in the array. This gives the following pseudo-"
"code:"

#: src/lessons/sort/ExExchangeSort.html:37
#, no-wrap
msgid ""
"Pour tout i dans [lgr-1,0] (parcours du plus grand au plus petit)\n"
"       Pour tout j dans [0, i]\n"
"          Si les cases j et j+1 doivent être inverser, le faire\n"
msgstr ""
"For all i in [len-1,0] (traversing from biggest to smallest)\n"
"       For all j in [0, i]\n"
"          If cells j and j+1 must be swapped, do it\n"

#: src/lessons/sort/ExExchangeSort.html:42
msgid ""
"Lorsqu'on exécute cet algorithme, il peut être un peu décevant de constater "
"qu'il s'exécute à la même vitesse que la version de base de BubbleSort. "
"C'est un effet graphique seulement puisque seules les changements de valeurs "
"dans le tableau sont représentées. Comme cette variante consiste à éviter "
"des comparaisons inutiles, elle effectue très exactement le même nombre "
"d'échanges que la version de base. Il est donc normal que notre interface "
"graphique la représente à la même vitesse que la version de base. Mais les "
"statistiques sur le nombre de lectures montrent bien que l'on a économisé "
"plus d'un quart du nombre de lectures, ce qui n'est pas si mal."
msgstr ""
"When we run this algorithm, it is quite disapointing to see that it runs "
"approximately at the same speed than the basic version of BubbleSort. This "
"is a graphical effect only since only value changes are graphically "
"represented. Since this variation avoids some useless comparisons, it does "
"exactly the same amount of swaps that the basic version. It is thus quite "
"logical that the graphical interface draws this version at the same pace "
"than the base version. But the stats on the amount of reads show that we "
"saved about the fourth of the amount of reads, which is not bad."

#: src/lessons/sort/ExExchangeSort.html:49
msgid ""
"D'un point de vue complexité algorithmique, cela ne change rien: cette "
"variante est toujours en O(n2) en moyenne (on ne gagne que sur la constante)."
msgstr ""
"From the asymptotic complexity point of view, there is absolutely no "
"difference: this variation is still in O(n^2) on average (our gain is only "
"on the constant term, ignored when computing the asymptotic complexity)."

#: src/lessons/sort/ExExchangeSort.html:52
msgid "BubbleSort3"
msgstr "BubbleSort3"

#: src/lessons/sort/ExExchangeSort.html:54
msgid ""
"Réintroduisons maintenant la petite optimisation que nous avions retiré à "
"l'étape précédente : Si un parcours n'a rien inversé, c'est que le tableau "
"est maintenant trié. Cela nous donne le pseudo-code suivant :"
msgstr ""
"Let's now reintroduce the little optimization we removed at previous step: "
"if a traversal does not swap any element, it means that the array is already "
"sorted. This leads to the following pseudo-code:"

#: src/lessons/sort/ExExchangeSort.html:57
#, no-wrap
msgid ""
"Pour tout i dans [lgr-1,0] (parcours du plus grand au plus petit)\n"
"       Pour tout j dans [0, i]\n"
"          Si les cases j et j+1 doivent être inverser, le faire\n"
"       Si le parcours sur les j n'a rien inversé, quiter la fonction\n"
msgstr ""
"For all i in [len-1,0] (traversing from biggest to smallest)\n"
"       For all j in [0, i]\n"
"          If cells j and j+1 must be swapped, do it\n"
"       If traversal on j did not swap anything, return from the function\n"

#: src/lessons/sort/ExExchangeSort.html:63
msgid ""
"Cet optimisation est plus décevante : on ne gagne que quelques pourcents en "
"nombre de lectures sur BubbleSort2."
msgstr ""
"This optimization is even more disapointing: it only provide a gain of a few "
"percents on the amount of reads over BubbleSort2."

#: src/lessons/sort/ExExchangeSort.html:65
msgid "CocktailSort"
msgstr "CocktailSort"

#: src/lessons/sort/ExExchangeSort.html:67
msgid ""
"Pour améliorer encore notre algorithme, il faut regarder un peu plus en "
"détail son comportement. On peut constater que les grands éléments sont très "
"rapidement mis en place tandis que les petits éléments se déplacent très "
"lentement vers leur destination. On parle classiquement de lièvres et de "
"tortues pour désigner respectivement les grandes valeurs et les petites "
"valeurs."
msgstr ""
"To improve further the algorithm, we need to look closer its behavior. One "
"can notice that big elements are moved very quickly in position while small "
"ones move very slowly to their destination. They are thus traditionally "
"refered to as \"rabits\" and \"turtles\" respectively for big fast values "
"and small slow ones.."

#: src/lessons/sort/ExExchangeSort.html:72
msgid ""
"Pour permettre aux tortues d'aller plus vite, le tri cocktail parcours "
"alternativement le tableau de gauche à droite et de droite à gauche. Voici "
"son pseudo-code:"
msgstr ""
"To help the turtles moving faster, the cocktail sort traverse alternatively "
"the array from right to left and from left to right. Here is the pseudo-code:"

#: src/lessons/sort/ExExchangeSort.html:76
#, no-wrap
msgid ""
"Faire\n"
"  Pour tout i dans [0,lgr-2], faire:\n"
"    si i et i+1 doivent être échangées, le faire\n"
"  Pour tout i dans [lgr-2,0] en descendant, faire:\n"
"    si i et i+1 doivent être échangées, le faire\n"
"tant qu'au moins l'un des parcours a inversé un élément\n"
msgstr ""
"Do\n"
"  For all i in [0,len-2], do:\n"
"    if i and i+1 must be swapped, do it\n"
"  For all i in [len-2,0] (downward), do:\n"
"    if i and i+1 must be swapped, do it\n"
"while at least one of the traversal swapped an element\n"

#: src/lessons/sort/ExExchangeSort.html:84
msgid ""
"On constate que le tri cocktail fait très exactement le même nombre "
"d'échanges que le tri à bulle, mais qu'il améliore les choses sur le nombre "
"de lectures. Il reste cependant moins bon que BubbleSort2 en la matière."
msgstr ""
"One can see that cocktail sort achieves exactly the same amount of swaps "
"than the bubble sort, but improves sligtly on read amount. It is however "
"still worse than BubbleSort2 to that extend."

#: src/lessons/sort/ExExchangeSort.html:87
msgid "CocktailSort2"
msgstr "CocktailSort2"

#: src/lessons/sort/ExExchangeSort.html:89
msgid ""
"Nous allons appliquer la même optimisation que BubbleSort2 à CocktailSort. "
"Il nous faut nous souvenir des bornes du tableau pas encore trié, et le "
"parcourir alternativement de droite à gauche et de gauche à droite:"
msgstr ""
"We will now apply to CocktailSort the same optimization than BubbleSort2 did "
"to BubbleSort. We must remember the limits of the array part not being "
"sorted yet, and traverse it alternatively from left to right and from right "
"to left:"

#: src/lessons/sort/ExExchangeSort.html:92
#, no-wrap
msgid ""
"debut=0; fin=lgr-2\n"
"Faire\n"
"  Pour tout i dans [debut,fin], faire:\n"
"    si i et i+1 doivent être échangées, le faire\n"
"  fin--\n"
"  Pour tout i dans [fin, debut] en descendant, faire:\n"
"    si i et i+1 doivent être échangées, le faire\n"
"  debut++\n"
"tant qu'au moins l'un des parcours a inversé un élément\n"
msgstr ""
"beg=0; end=len-2\n"
"do\n"
"  For all Pour i in [beg,end], do:\n"
"      If cells i and i+1 must be swapped, do it    \n"
"  end--\n"
"  For all Pour i in [beg,end] (downwards), do:\n"
"      If cells i and i+1 must be swapped, do it    \n"
"  beg++\n"
"while at least one of the traversal swapped an element\n"

#: src/lessons/sort/ExExchangeSort.html:103
msgid "CocktailSort3"
msgstr "CocktailSort3"

#: src/lessons/sort/ExExchangeSort.html:104
msgid ""
"Même si la complexité algorithmique de CocktailSort2 est la même que le tri "
"à bulle, il semble bien mieux s'en tirer en pratique. On peut encore "
"l'améliorer un tout petit peu en arretant tout si le parcours dans l'ordre "
"croissant n'a rien inversé, sans faire le parcours dans l'ordre "
"descroissant. De même, on peut quiter si le parcours croissant a inversé des "
"choses, mais pas le parcours décroissant."
msgstr ""
"Even if the asymptotic complexity of CocktailSort2 is the same than the one "
"of BubbleSort, it seem to perform better in practice. It is even possible to "
"improve a bit further by stopping it if the first traversal didn't found "
"anything to swap, without achieving the downwards traversal. Likewise, we "
"can stop if the upward traversal found something to swap, but not the "
"downwards one."

#: src/lessons/sort/ExExchangeSort.html:109
msgid "CombSort"
msgstr "CombSort"

#: src/lessons/sort/ExExchangeSort.html:111
msgid ""
"Nous avons vu que le tri cocktail permet d'améliorer un peu les choses pour "
"les tortues (ie, les petites valeurs près de la fin du tableau), mais on "
"peut faire mieux. CombSort revient à leur faire prendre un racourci: Au lieu "
"de comparer les valeurs adjacentes, on compare des valeurs séparés par un "
"écart plus grand que 1. Ainsi, les tortues vont se déplacer de <i>ecart</i> "
"cases à chaque parcours. Bien entendu, il faut appliquer l'algorithme avec "
"des écarts de plus en plus petit et terminer avec <i>ecart=1</i> pour "
"s'assurer que le tableau est entièrement trié à la fin. Choisir comment "
"réduire l'écart entre les parcours est une question difficile (voir "
"wikipédia en anglais sur le thème), mais en pratique, le diviser par 1.3 à "
"chaque fois amène de bons résultats. Voici le pseudo-code correspondant :"
msgstr ""
"We saw that CocktailSort improve a bit for turtles (ie, small values near to "
"the end of the array), but it is still possible to achieve better. ComboSort "
"comes down to providing them a short cut: instead of comparing adjacent "
"values, we compare values separated by a gap bigger than 1. That way, "
"turtles we traverse <i>gap</i> cells at each traversal. Naturally, we have "
"to apply the algorithm with decreasing gaps, and finish with <i>gap=1</i> to "
"ensure that the array is correctly sorted afterward. Choosing the right gap "
"and how to decrease it is a difficult question, but in practice, dividing it "
"by 1.3 after each traversal leads to good performance. Here is the "
"corresponding pseudo-code:"

#: src/lessons/sort/ExExchangeSort.html:120
#, no-wrap
msgid ""
" ecart = lgr;\n"
" faire \n"
"   si ecart>1 alors\n"
"     ecart = ecart / 1.3\n"
"   i = O\n"
"   tant que i+ecart &lt; lgr faire:\n"
"     si i et i+ecart doivent être inversés, le faire\n"
"     ajouter ecart à i\n"
" tant que l'écart est plus grand que 1 et/ou que le dernier parcours a inversé au moins un élément\n"
msgstr ""
"gap = len;\n"
"do\n"
"   if gap>1 then\n"
"     gap = gap / 1.3\n"
"   i = O\n"
"   while i+gap &lt; len do:\n"
"     if i and i+gap must be swapped, do it\n"
"     increase i by the gap\n"
"while the gap is bigger than 1 and/or the last traversal swapped at least one pair\n"

#: src/lessons/sort/ExExchangeSort.html:131
msgid ""
"Cet algorithme a été inventé par Wlodek Dobosiewicz en 1980 et redécouvert "
"et popularisé par Stephen Lacey et Richard Box, qui l'ont décrit dans le "
"magazine Byte d'avril 1991."
msgstr ""
"This algorithm was invented by Wlodek Dobosiewicz in 1980, and later "
"rediscovered and popularised by Stephen Lacey and Richard Box, who described "
"it in Byte Magazine in April 1991"

#: src/lessons/sort/ExExchangeSort.html:134
msgid "CombSort11"
msgstr "CombSort11"

#: src/lessons/sort/ExExchangeSort.html:136
msgid ""
"Les auteurs de l'algorithme ont constaté que l'on améliore les performances "
"en s'assurant que les dernières valeurs de l'écart sont (11, 8, 6, 4, 3, 2, "
"1) plutôt que (9, 6, 4, 3, 2, 1) ou (10, 7, 5, 3, 2, 1). Reprenez donc le "
"code de CombSort, et indiquez juste après la mise à jour de l'écart que si "
"la valeur est 9 ou 10, il faut utiliser 11 à la place."
msgstr ""
"The authors of this algorithm constated that the performance is increased if "
"we make sure that the last values of the gap are (11, 8, 6, 4, 3, 2, 1) "
"rather than (9, 6, 4, 3, 2, 1) or (10, 7, 5, 3, 2, 1). Rework the code of "
"CombSort to ensure just after the gap update that if it is 9 or 10, we "
"should use 11 instead."

#: src/lessons/sort/ExExchangeSort.html:140
msgid "GnomeSort"
msgstr "GnomeSort"

#: src/lessons/sort/ExExchangeSort.html:142
msgid ""
"Le tri du gnome s'apparente au tri par insertion, à ceci près que les "
"éléments sont déplacés par une série d'échange comme dans le tri à bulle. Le "
"nom vient du comportement supposé des gnomes des jardins quand ils rangent "
"une série de pots de fleurs. Voici la description de l'algorithme par son "
"auteur:"
msgstr ""
"The Gnome sort is similar to insertion sort, but the elements are moved in "
"position by a serie of swaps just like in bubble sort. It is named after the "
"supposed behavior of garden gnomes when they sort flower pots. Here is a "
"description of the algorithm by its author:"

#: src/lessons/sort/ExExchangeSort.html:146
msgid ""
"Gnome Sort is based on the technique used by the standard Dutch Garden Gnome "
"(Du.: tuinkabouter). Here is how a garden gnome sorts a line of flower pots. "
"Basically, he looks at the flower pot next to him and the previous one; if "
"they are in the right order he steps one pot forward, otherwise he swaps "
"them and steps one pot backwards. Boundary conditions: if there is no "
"previous pot, he steps forwards; if there is no pot next to him, he is "
"done.  <i>—Dick Grune</i>"
msgstr ""
"Gnome Sort is based on the technique used by the standard Dutch Garden Gnome "
"(Du.: tuinkabouter). Here is how a garden gnome sorts a line of flower pots. "
"Basically, he looks at the flower pot next to him and the previous one; if "
"they are in the right order he steps one pot forward, otherwise he swaps "
"them and steps one pot backwards. Boundary conditions: if there is no "
"previous pot, he steps forwards; if there is no pot next to him, he is "
"done.  <i>—Dick Grune</i>"

#: src/lessons/recursion/Main.html:1
msgid "Algorithmes récursifs"
msgstr "Recursive algorithms"

#: src/lessons/recursion/Main.html:2
msgid "Cette leçon vous permet d'expérimenter avec des algorithmes récursifs."
msgstr "This lesson allows to experiment with recursive algorithms."

#: src/lessons/recursion/Main.html:4
msgid ""
"Si vous cherchez d'autres algorithmes récursifs, un exercice sur les tris "
"récursifs (en particulier QuickSort et MergeSort) est prévu à l'avenir dans "
"la leçon sur les tris."
msgstr ""
"If you need more recursive algorithms, an exercise on recursive sorting "
"algorithms (in particular QuickSort and MergeSort) is planned in the future "
"within the sorting lesson."

#: src/lessons/recursion/Square.html:1
msgid "Les petites cousines des Buggles"
msgstr "The small cousines of Buggles"

#: src/lessons/recursion/Square.html:3
msgid ""
"Aujourd'hui, nous allons faire la connaissance des petites cousines des "
"buggles : les tortues. En fait, les tortues sont bien plus vieilles que les "
"buggles. Elles ont été inventées dans les années 70 par un scientifique du "
"MIT nommé Seymour Papert pour aider à l'enseignement la programmation, et "
"les buggles sont une variation sur le thème inventée par Lyn Turbak du "
"Wellesley College plus tard."
msgstr ""
"Today, we will meet the small cousines of the buggles: the turtles. In fact, "
"turtles are much olders than the buggles. They were invented in the 70's by "
"a scientific from MIT called Seymour Papert to help teaching programming, "
"and the buggles are a variation on the idea invented by Lyn Turbak from "
"Wellesley College later."

#: src/lessons/recursion/Square.html:10
msgid ""
"Les tortues sont donc un peu comme les buggles, en plus petit.  Comme les "
"buggles, vous pouvez leur demander d'avancer, de tourner, de reculer, etc. "
"Comme les buggles, elles laissent une trace sur leur passage quand elles "
"avancent (simplement, le trait est bien plus fin)."
msgstr ""
"Turtles are thus a bit like buggles, but smaller. Just like buggles, you can "
"order them to move forward, to turn, to move backward, etc. Just like "
"buggles, they leave a line on their path when they move (but the line is "
"much smaller)."

#: src/lessons/recursion/Square.html:15
msgid ""
"La principale différence est que là où les buggles ne peuvent tourner que de "
"quarts de tour, les tortues peuvent tourner d'un angle quelconque précisé "
"par un nombre réel (double). Cela leur donne bien plus de liberté dans leur "
"mouvement. Les buggles savent faire plusieurs trucs qui échappent aux "
"tortues, comme lire et écrire des messages sur le sol ou ramasser des "
"objets, et il y a parfois des murs dans leur univers, mais tout cela dépasse "
"complètement les tortues."
msgstr ""
"The main difference is that where buggles can only move of right angles, "
"turtles can move of any arbitrary angles specified by a real number (a "
"double). This gives them much more liberty in their movings. The buggles can "
"do several other tricks, like reading and writting messages, picking or "
"dropping objects, and there is sometimes walls in their worlds (but all this "
"is completely above the capacities of turtles)."

#: src/lessons/recursion/Square.html:22
msgid ""
"D'un point de vue pratique, la plupart des méthodes que vous connaissez à "
"propos des buggles fonctionnent également avec les tortues, à quelques "
"variantes près. En particulier, la méthode <code>forward</code> prend en "
"argument le nombre de pas donné comme un nombre double (voir \"About this "
"world\" dans le menu pour plus de détails)."
msgstr ""
"From a practical point of view, most of the methods you knew about buggles "
"still work with turtles, with some minor adaptations. In particular, the "
"<code>forward()</code> method takes the amount of steps to do as a double "
"(see \"About this world\" for more details)."

#: src/lessons/recursion/Square.html:28
msgid "Des doubles ? Mais qu'est ce que c'est ?"
msgstr "Doubles? But what is it?"

#: src/lessons/recursion/Square.html:29
msgid "C'est simplement un nombre à virgule. Exemple:"
msgstr "It's simply a point number. Example:"

#: src/lessons/recursion/Square.html:31
#, no-wrap
msgid ""
"double x = 3.72;\n"
"x + 1.234 // Valeur = 4.954\n"
"x + 2 // Valeur = 5.72 (2 converti en 2.0 automatiquement)\n"
"x * 2 // Valeur = 7.44 (2 converti en 2.0 automatiquement)\n"
"x / 2 // Valeur = 1.86 (2 converti en 2.0 automatiquement)\n"
"(int) x // Valeur = 1 (“transtypage en int”, converti en entier en tronquant)\n"
"Math.round(x) // Valeur = 2 (1.86 arrondi à l'entier le plus proche)\n"
"Math.floor(x) // Valeur = 1 (1.86 arrondi en direction de moins l'infini)\n"
"Math.floor(-5.12) // Vale = -6 (Arrondi en direction de moins l'infini)\n"
"Math.ceiling(x) // Value = 2 (1.86 arrondi en direction de plus l'infini)\n"
"Math.ceiling(-5.12) // Value = -5 (Arrondi en direction de plus l'infini)\n"
"(double) 17 // Value = 17.0 (“transtypage en double”, converti en double)\n"
msgstr ""
"double x = 3.72;\n"
"x + 1.234 // Value = 4.954\n"
"x + 2 // Value = 5.72 (2 converted to 2.0 automatically)\n"
"x * 2 // Value = 7.44 (2 converted to 2.0 automatically)\n"
"x / 2 // Value = 1.86 (2 converted to 2.0 automatically)\n"
"(int) x // Value = 1 (“casting to int”, converted to integer by truncating)\n"
"Math.round(x) // Value = 2 (1.86 rounded to nearest integer)\n"
"Math.floor(x) // Value = 1 (1.86 rounded toward minus infinity)\n"
"Math.floor(-5.12) // Value = -6 (rounded toward minus infinity)\n"
"Math.ceiling(x) // Value = 2 (1.86 rounded toward plus infinity)\n"
"Math.ceiling(-5.12) // Value = -5 (rounded toward plus infinity)\n"
"(double) 17 // Value = 17.0 (“casted to double”, converted to double)\n"

#: src/lessons/recursion/Square.html:45 src/lessons/recursion/Circle.html:16
#: src/lessons/welcome/Array.html:150
msgid "Objectif de l'exercice"
msgstr "Goal of this exercise"

#: src/lessons/recursion/Square.html:46
msgid ""
"Bien que ce soit le premier exercice de la leçon sur la récursivité, le code "
"que vous devez écrire n'est pas récursif. L'objectif est de se familiariser "
"avec le monde des tortues avant d'attaquer les choses sérieuses."
msgstr ""
"Even if this is the first exercise on the recursivity lesson, the code you "
"have to write is not recursive. The goal is to get familiar with the turtle "
"world before getting on serious matter."

#: src/lessons/recursion/Square.html:50
msgid ""
"Vous devez reproduire une forme géométrique simple faite de quatre carrés de "
"longueur 100 de coté (voir le monde objectif pour plus de détails). C'est "
"sans doute une bonne idée d'écrire une méthode pour faire un carré, et de la "
"réutiliser lors de l'écriture de la méthode <code>run()</code> qui fait le "
"travail. Il est indispensable d'écrire au moins la méthode run, dont le "
"prototype est le suivant:"
msgstr ""
"You must reproduce a simple geometrical painting constituted of four 100 "
"steps long squares (see the objective world for more details). It is "
"obviously a good idea to write a method to draw a square, and then use it in "
"your <code>run()</code> in charge of doing the work. You must absolutely "
"write at least the run method, which prototype is the following:"

#: src/lessons/recursion/Square.html:57
#, no-wrap
msgid ""
"public void run() {\n"
"  // ecrivez ici ce que doit faire votre tortue\n"
"}"
msgstr ""
"public void run() {\n"
"  // write here what your turtle is supposed to do\n"
"}"

#: src/lessons/recursion/PolygonFractal.html:1
msgid "Fractales de polygones"
msgstr "Fractal of polygons"

#: src/lessons/recursion/PolygonFractal.html:3
msgid ""
"La fractale que nous allons dessiner maintenant est formée d'un polygone "
"auquel sont ajoutés des petits polygones sur chaque angle. Le prototype de "
"la fonction le traçant est le suivant:"
msgstr ""
"The fractal we will now draw is formed of a polygon, with little polygons on "
"each corner. The prototype of the method drawing it is the following:"

#: src/lessons/recursion/PolygonFractal.html:5
#, no-wrap
msgid "void polygonFractal (int levels, int sides, double length, double shrink)"
msgstr "void polygonFractal (int levels, int sides, double length, double shrink)"

#: src/lessons/recursion/PolygonFractal.html:7
#: src/lessons/recursion/Sierpinski.html:7
#: src/lessons/recursion/DragonCurve1.html:25
#: src/lessons/recursion/DragonCurve2.html:37
msgid ""
"Consultez les objectifs de chaque monde pour comprendre comment écrire la "
"fonction."
msgstr ""
"Have a look at each world's objective view to understand how to write the "
"function."

#: src/lessons/recursion/Koch.html:1
msgid "Flocons de neige"
msgstr "Snow flake"

#: src/lessons/recursion/Koch.html:3
msgid ""
"Nous allons maintenant dessiner des flocons de neige en utilisant la "
"fractale de Koch.  Une fractale est un dessin géométrique dont le motif se "
"reproduit à n'importe quelle échelle."
msgstr ""
"We will now draw snow flakes using the Koch fractal. A fractal is a "
"geometrical pattern repeated at every scale."

#: src/lessons/recursion/Koch.html:6
msgid ""
"La forme générale est un triangle dont chaque coté est donné par une série "
"d'appels récursifs.  La forme générale est obtenue en enchainant trois cotés "
"de la façon suivante."
msgstr ""
"The general form is a triangle, with each side given by a serie of recursive "
"calls. The general form is given by something like this:"

#: src/lessons/recursion/Koch.html:8
#, no-wrap
msgid ""
"void snowFlake (int levels, double length) {\n"
"   snowSide(levels, length);\n"
"   turnRight(120);\n"
"   snowSide(levels, length);\n"
"   turnRight(120);\n"
"   snowSide(levels, length);\n"
"   turnRight(120);\n"
"}"
msgstr ""
"void snowFlake (int levels, double length) {\n"
"   snowSide(levels, length);\n"
"   turnRight(120);\n"
"   snowSide(levels, length);\n"
"   turnRight(120);\n"
"   snowSide(levels, length);\n"
"   turnRight(120);\n"
"}"

#: src/lessons/recursion/Koch.html:17
msgid ""
"Observez le dessin dans chaque monde objectif pour comprendre la logique de "
"ce motif afin de la reproduire.  Vous devez écrire la fonction snowSide, qui "
"est récursive."
msgstr ""
"Observe the drawing in each world's objective to understand the pattern's "
"logic, and then reproduce it. You must write the <code>snowSide()</code> "
"method, which is recursive."

#: src/lessons/recursion/Star.html:1
msgid "Tortues dans les étoiles"
msgstr "Turtles in the stars"

#: src/lessons/recursion/Star.html:3
msgid ""
"Voici un dernier exercice de prise en main avant la récursion. Il s'agit de "
"faire dessiner trois étoiles à 5 branches à la tortue. Comme toutes les "
"étoiles régulières à N branches, les angles des pointes sont de 360/N degrés "
"tandis que les angles entre les pointes sont de 2*360/N degrés."
msgstr ""
"This is the last hand-on turtles exercise before recursion. The goal is to "
"draw three 5-branches stars. Like any regular stars with N branches, the "
"angle at each external corners are 360/N degrees while the angles between "
"branches are of 2*360/N degrees."

#: src/lessons/recursion/Star.html:8
msgid ""
"La première étoile à dessiner est noire (<code>Color.black</code>) et ses "
"branches font 100 pas de longueur, la seconde est bleue (<code>Color.blue</"
"code>) et ses branches font 80 pas de longueur. Elle est décallée de 45 "
"degrés vers le bas par rapport à la première.  La dernière étoile est rouge "
"(<code>Color.red</code>), ses branches font 60 pas, et elle est décallée de "
"45 degrés par rapport à la seconde."
msgstr ""
"The first star to draw is black (<code>Color.black</code>) and its branches "
"are 100 steps long. The second is blue (<code>Color.blue</code>) and its "
"branches are 80 steps long. It's shifted of 45 degrees from the first one. "
"The last star is red (<code>Color.red</code>), its branches are 60 steps "
"long and it's shifted of 45 degrees from the previous one."

#: src/lessons/recursion/Star.html:15
msgid "Consultez l'objectif du monde pour visualiser la figure à réaliser."
msgstr "Observe the world's objective to visualize the picture to draw."

#: src/lessons/recursion/Circle.html:1
msgid "Trois petits tours"
msgstr "Three little circles"

#: src/lessons/recursion/Circle.html:3
msgid ""
"Comme nous l'avons vu (et comme vous pouvez le vérifier en consultant l'aide "
"de ce monde dans le menu \"À propos de ce monde\"), les tortues ne savent "
"que se déplacer en ligne droite. Et pourtant, l'objectif de cet exercice est "
"de leur faire dessiner des cercles... On peut pourtant résoudre ce problème "
"simplement en réalisant qu'un cercle peut être représenté comme une "
"concaténation de petits segments."
msgstr ""
"As we saw (and as you can check in the documentation of this world under "
"\"About this world\"), turtles can only draw straight lines. Despite of "
"this, the goal of this world is to draw circles... This can be achived "
"simply by realizing that a circle can be seen as a concatenation of very "
"little segments."

#: src/lessons/recursion/Circle.html:10
msgid ""
"Les amateurs de calcul différentiel diraient même sans doute qu'un cercle "
"est la limite asymptotique d'une telle construction quand la taille des "
"segments tend vers zéro alors que leur nombre tend vers l'infini (mais on "
"peut tout de même réussir l'exercice sans maîtriser le calcul différentiel)."
msgstr ""
"Differential calculus would even argue that a circle is the asymptotical "
"limit of such construct when the size of each segment becomes infinitely "
"small while their amount becomes infinitely large (but it is still possible "
"to solve this exercise without understanding differential calculus)."

#: src/lessons/recursion/Circle.html:18
msgid ""
"Écrivez une fonction dessinant un cercle, avec la taille de chacun des 360 "
"pas passée en paramètre. Utilisez la ensuite dans votre méthode <code>run()</"
"code> pour réaliser la figure dans son ensemble. Le premier cercle s'obtient "
"avec des pas de 0.5, le second avec des pas de 1 et le troisième avec des "
"pas de 1.5. Encore une fois, il s'agit d'un exercice de prise en main, et "
"aucune récursion n'est nécessaire."
msgstr ""
"Write a function drawing a circle, taking the size of each of the 360 "
"segments as parameter. Then use it in your <code>run()</code> method to draw "
"the whole picture. The first circle is obtained with segments of size 0.5, "
"the second with segments of size 1 and the last one with 1.5-long segments. "
"Once again, this is a hand-on exercise, no recursion is needed."

#: src/lessons/recursion/Tree.html:1
msgid "Arbres"
msgstr "Trees"

#: src/lessons/recursion/Tree.html:3
msgid ""
"Nous allons maintenant dessiner des arbres. Pour cela, nous allons écrire "
"une fonction doublement récursive de prototype"
msgstr ""
"We will now draw trees. For that, we will write a method using double "
"recursion following this prototype"

#: src/lessons/recursion/Tree.html:4
#, no-wrap
msgid "void tree(int steps, double length, double angle, double shrink)"
msgstr "void tree(int steps, double length, double angle, double shrink)"

#: src/lessons/recursion/Tree.html:6
msgid ""
"Pour dessiner un arbre à quatre étages, il faut dessiner un tronc de la "
"taille indiquée, tourner à droite de l'angle indiqué, faire un arbre à 3 "
"étages, tourner à gauche de deux fois l'angle indiqué, faire un autre arbre "
"à 3 étages, puis revenir à sa position initiale."
msgstr ""
"To draw a tree of four levels, you have to draw a trunk of the given length, "
"turn right of the given angle, draw a tree of level 3, turn left twice of "
"the given angle, draw another tree of level 3, and come back to your initial "
"location."

#: src/lessons/recursion/Tree.html:10
msgid ""
"Si le tronc d'un arbre mesure length à l'étage N, il mesure shrink*length à "
"l'étage N+1."
msgstr ""
"If a tree's trunk is of length 'len', the trunk of the next level tree will "
"be of length 'len*shrink'."

#: src/lessons/recursion/Sierpinski.html:1
msgid "Triangle de Sierpinski"
msgstr "Sierpinski's Triangle"

#: src/lessons/recursion/Sierpinski.html:3
msgid ""
"La fractale que nous allons dessiner maintenant est formée d'un triangle "
"dans lequel sont imbriqués des triangles plus petits.  Le prototype de la "
"fonction le traçant est le suivant :"
msgstr ""
"The fractal we will now draw is formed of a big triangle inside which "
"several smaller triangles are embeeded. The prototype of the fuction to draw "
"it is the following:"

#: src/lessons/recursion/Sierpinski.html:5
#, no-wrap
msgid "void sierpinski(int level, double length)"
msgstr "void sierpinski(int level, double length)"

#: src/lessons/recursion/Spiral.html:1
msgid "Spirales"
msgstr "Spirals"

#: src/lessons/recursion/Spiral.html:3
msgid ""
"Nous allons maintenant écrire notre première fonction récursive avec les "
"tortues. L'objectif est de dessiner des spirales de différentes formes avec "
"la même fonction, dont le prototype est le suivant:"
msgstr ""
"We will now draw our first recursive function with the turtle. The goal is "
"to draw different kind of spirals with the same function, which prototype is "
"the following: "

#: src/lessons/recursion/Spiral.html:6
#, no-wrap
msgid "void spiral(int steps, int angle, int length, int increment)"
msgstr "void spiral(int steps, int angle, int length, int increment)"

#: src/lessons/recursion/Spiral.html:8
msgid ""
"Pour vous aider à comprendre comment l'écrire, voici un exemple de la suite "
"des différentes valeurs prises par les paramètres dans un cas:"
msgstr ""
"To help you understanding how to write it, here is an example of how the "
"parameters change during one specific call:"

#: src/lessons/recursion/Spiral.html:11
#, no-wrap
msgid ""
"spiral(5, 90, 0, 3);\n"
"  forward(0);\n"
"  turnLeft(90);\n"
"  spiral(4,90,3,3);\n"
"    forward(3);\n"
"    turnLeft(90);\n"
"    spiral(3,90,6,3);\n"
"      forward(6);\n"
"      turnLeft(90);\n"
"      spiral(2,90,9,3);\n"
"        forward(9);\n"
"        turnLeft(90);\n"
"        spiral(1,90,12,3);\n"
"          forward(12);\n"
"          turnLeft(90);\n"
"          spiral(0,90,12,3);\n"
msgstr ""
"spiral(5, 90, 0, 3);\n"
"  forward(0);\n"
"  turnLeft(90);\n"
"  spiral(4,90,3,3);\n"
"    forward(3);\n"
"    turnLeft(90);\n"
"    spiral(3,90,6,3);\n"
"      forward(6);\n"
"      turnLeft(90);\n"
"      spiral(2,90,9,3);\n"
"        forward(9);\n"
"        turnLeft(90);\n"
"        spiral(1,90,12,3);\n"
"          forward(12);\n"
"          turnLeft(90);\n"
"          spiral(0,90,12,3);\n"

#: src/lessons/recursion/DragonCurve1.html:1
msgid "Courbe du Dragon (1)"
msgstr "Dragon curve (1)"

#: src/lessons/recursion/DragonCurve1.html:3
msgid "Un exemple classique de la méthode récursive est la courbe du Dragon."
msgstr "The dragon curve is a classical example of recursive method."

#: src/lessons/recursion/DragonCurve1.html:5
msgid "La définition de cette courbe est la suivante :"
msgstr "The definition of this curve is the following:"

#: src/lessons/recursion/DragonCurve1.html:6
msgid ""
"la courbe du Dragon d'ordre 1 est un vecteur entre deux points quelconques P "
"et Q,"
msgstr ""
"the dragon curve of order 1 is a vector between to arbitrary points P and Q,"

#: src/lessons/recursion/DragonCurve1.html:7
msgid ""
"la courbe du Dragon d'ordre n est la courbe du Dragon d'ordre n-1 entre P et "
"R suivie de la même courbe d'ordre n-1 entre R et Q (à l'envers), où PRQ est "
"le triangle isocèle rectangle en R, et R est à droite du vecteur PQ.  Donc, "
"si P et Q sont les points de coordonnées (x, y) et (z,t), les coordonnées "
"(u, v) de R sont"
msgstr ""
"the dragon curve of order n is the dragon curve of order n-1 between P and "
"R, followed by the same curve of order n-1 between R and Q (reverse side), "
"where PRQ is an isoscele triangle with angle R being a right angle, and R "
"being at the right of the PQ vector. Thus, if P and Q coordinates are (x, y) "
"and (z, t), the coordinate (u, v) of R are given by:"

#: src/lessons/recursion/DragonCurve1.html:13
#: src/lessons/recursion/DragonCurve2.html:18
#: src/lessons/recursion/DragonCurve2.html:29
#, no-wrap
msgid ""
"u = (x + z)/2 + (t - y)/2\n"
"v = (y + t)/2 - (z - x)/2\n"
msgstr ""
"u = (x + z)/2 + (t - y)/2\n"
"v = (y + t)/2 - (z - x)/2\n"

#: src/lessons/recursion/DragonCurve1.html:19
msgid "Le prototype de la méthode traçant la courbe est le suivant :"
msgstr "The prototype of the method drawing the curve is the following:"

#: src/lessons/recursion/DragonCurve1.html:20
#: src/lessons/recursion/DragonCurve2.html:14
#, no-wrap
msgid "void dragon(int ordre, double x, double y, double z, double t)"
msgstr "void dragon(int ordre, double x, double y, double z, double t)"

#: src/lessons/recursion/DragonCurve1.html:23
msgid ""
"Vous utiliserez la méthode <code>setPos(x,y)</code> pour déplacer votre "
"tortue aux coordonnées (x,y) et la méthode <code>moveTo(z,t)</code> pour "
"tracer un trait depuis le point où la tortue est positionnée vers le point "
"de coordonnées (z,t)"
msgstr ""
"You should use the method <code>setPos(x,y)</code> to put your turtle at "
"coordinates (x,y) and the method <code>moveTo(z,t)</code> to draw a line "
"between the turtle position and the point (z,t)."

#: src/lessons/recursion/DragonCurve2.html:1
msgid "Courbe du Dragon (2)"
msgstr "The dragon curve (2)"

#: src/lessons/recursion/DragonCurve2.html:3
msgid ""
"La solution précédente nécessite que la tortue se téléporte, autrement dit, "
"qu'il est parfois nécessaire de lever le crayon pour tracer la courbe.  En "
"effet, entre la destination du trait tracé par le premier appel récursif ne "
"correspond pas à la source du trait qui doit être tracé par le second appel "
"récursif.  C'est pourquoi il était nécessaire d'utiliser la méthode "
"<code>setPos()</code>"
msgstr ""
"Previous solution induce that the turtle teleports to other location, or at "
"the very least, that it moves its pen up during the drawing. Indeed, the end "
"of the drawing of the first recursive call does not match the begining of "
"the second recursive call. That is why we had to use the method <code>setPos"
"()</code>"

#: src/lessons/recursion/DragonCurve2.html:7
msgid ""
"Dans cette leçon, vous allez donc réaliser une méthode récursive qui permet "
"de tracer la courbe du dragon sans lever le crayon. Pour ce faire, vous "
"définirez une seconde méthode récursive qui trace la courbe à l'envers."
msgstr ""
"In this lesson, you will write a recursive method allowing to draw the "
"dragon curve without taking the pen up. For that, we need another recursive "
"method drawing the mirror side of the curve."

#: src/lessons/recursion/DragonCurve2.html:9
msgid ""
"La méthode <code>dragon()</code> sera définie récursivement en fonction des "
"méthodes <code>dragon()</code> et <code>dragonInverse()</code>. De même, la "
"méthode <code>dragonInverse()</code> sera définie récursivement en terme de "
"<code>dragon()</code> et de <code>dragonInverse()</code>. Voici un bien bel "
"exemple de <i>récursivité croisée</i>."
msgstr ""
"The method <code>dragon()</code> is then recursively defined using itself "
"and <code>dragonReverse()</code>. Likewise, the method <code>dragonReverse()"
"</code> is defined recursively using itself and <code>dragon()</code>. This "
"is thus an example of <i>mutual recursion</i>."

#: src/lessons/recursion/DragonCurve2.html:13
msgid ""
"Le prototype de la méthode <code>dragon()</code> reste le même que "
"précédemment :"
msgstr ""
"The prototype of the <code>dragon()</code> method remains unchanged from "
"previous exercise:"

#: src/lessons/recursion/DragonCurve2.html:16
msgid ""
"Les coordonnées (u, v) du nouveau point introduit par la méthode <code>dragon"
"()</code> seront :"
msgstr ""
"The new point's coordinate (u, v) introduced by the <code>dragon()</code> "
"are:"

#: src/lessons/recursion/DragonCurve2.html:24
msgid ""
"Le prototype de la méthode <code>dragonInverse()</code> est identique : :"
msgstr "The prototype of the method <code>dragonReverse</code> is similar:"

#: src/lessons/recursion/DragonCurve2.html:25
#, no-wrap
msgid "void dragonInverse(int ordre, double x, double y, double z, double t)"
msgstr "void dragonReverse(int ordre, double x, double y, double z, double t)"

#: src/lessons/recursion/DragonCurve2.html:27
msgid ""
"Les coordonnées (u, v) du nouveau point introduit par la méthode "
"<code>dragonInverse()</code> seront :"
msgstr ""
"The new point's coordinate (u, v) introduced by the <code>dragonReverse()</"
"code> are:"

#: src/lessons/recursion/DragonCurve2.html:35
msgid ""
"Afin de rendre, plus visible le travail de chacune des deux méthodes "
"récursives, le trait tracé par la méthode <code>dragon()</code> devra être "
"rouge (<code>Color.red</code>) et le trait tracé par la méthode "
"<code>dragonInverse</code> devra être bleu (<code>Color.blue</code>)."
msgstr ""
"To make the work of each method recursiv more visible, the line painted by "
"the <code>dragon()</code> must be red (<code>Color.red</code>) while the "
"line painted by the <code>dragonReverse()</code> must be blue (<code>Color."
"blue</code>)."

#: src/lessons/recursion/SpiralUse.html:1
msgid "Faire des spirales"
msgstr "Drawing spirals"

#: src/lessons/recursion/SpiralUse.html:3
msgid ""
"Saurez-vous faire les différents motifs de cet exercice en utilisant la "
"méthode <code>spiral()</code>?"
msgstr ""
"Can you reproduce the provided patterns of this exercise using the "
"<code>spiral()</code> method?"

#: src/lessons/recursion/SpiralUse.html:6
msgid ""
"Vous devez écrire une méthode <code>doit(int)</code> qui prend en paramètre "
"le numéro de la page à dessiner. Son code est de la forme suivante. A0, B0, "
"etc sont des nombres entiers. L'objectif de l'exercice est de retrouver les "
"valeurs convenables pour chaque page."
msgstr ""
"You must provide a method called <code>doit(int)</code> taking the number of "
"the page to draw as parameter. Its code is as following, with A0, B0, etc "
"being integers. The goal of this exercise is to find the good values for "
"each page."

#: src/lessons/recursion/SpiralUse.html:12
#, no-wrap
msgid ""
"void doit(int page) {\n"
"  switch (page) {\n"
"    case 0: /* Dessin de la première page, marquée \"One\" */\n"
"      spiral(A0,B0,C0,D0);\n"
"      break;\n"
"    case 1: /* Dessin de la seconde page, marquée \"Two\" */\n"
"      spiral(A1,B1,C1,D1);\n"
"      break;\n"
"    case 2: /* Dessin de la page marquée \"Three\" */\n"
"      spiral(A2,B2,C2,D2);\n"
"      break;\n"
"    case 3: /* Dessin de la page marquée \"Four\" */\n"
"      spiral(A3,B3,C3,D3);\n"
"      break;\n"
"    case 4: /* Dessin de la page marquée \"Five\" */\n"
"      spiral(A4,B4,C4,D4);\n"
"      break;\n"
"  }\n"
"}\n"
msgstr ""
"void doit(int page) {\n"
"  switch (page) {\n"
"    case 0: /* Drawing of the first page, dubbed \"One\" */\n"
"      spiral(A0,B0,C0,D0);\n"
"      break;\n"
"    case 1: /* Drawing of the second page, dubbed \"Two\" */\n"
"      spiral(A1,B1,C1,D1);\n"
"      break;\n"
"    case 2: /* Drawing of the page dubbed \"Three\" */\n"
"      spiral(A2,B2,C2,D2);\n"
"      break;\n"
"    case 3: /* Drawing of the page dubbed \"Four\" */\n"
"      spiral(A3,B3,C3,D3);\n"
"      break;\n"
"    case 4: /* Drawing of the page dubbed \"Five\" */\n"
"      spiral(A4,B4,C4,D4);\n"
"      break;\n"
"  }\n"
"}\n"

#: src/lessons/recursion/SpiralUse.html:34
msgid ""
"Pas besoin de recopier le code de <code>spiral()</code>, la tortue de cet "
"exercice connait déjà la méthode."
msgstr ""
"No need to copy over the method of <code>spiral()</code>, the turtle of this "
"exercise already knows it."

#: src/lessons/welcome/Main.html:1
msgid "Premiers pas"
msgstr "First steps"

#: src/lessons/welcome/Main.html:3
msgid ""
"Cette première leçon va vous guider dans vos premiers pas en programmation "
"Java. Elle est destinée aux débutants en Java."
msgstr "This first leçon will lead your first steps in Java programming. It is intended for beginners."

#: src/lessons/welcome/Main.html:4
msgid "Liste des notions abordées :"
msgstr "List of seen notions:"

#: src/lessons/welcome/Main.html:6
msgid "Variables et instructions"
msgstr "Variables and instructions"

#: src/lessons/welcome/Main.html:7
msgid "Constructions de syntaxiques de base:"
msgstr "Basic synthaxic constructions"

#: src/lessons/welcome/Main.html:9
msgid "conditionnelles (if et switch)"
msgstr "Conditionnals (if and switch)"

#: src/lessons/welcome/Main.html:10
msgid "boucles (for, while et do-whiles)"
msgstr "loops (for, while and do-while)"

#: src/lessons/welcome/Main.html:12
msgid "Méthodes (avec ou sans arguments, avec ou sans retour)"
msgstr "Methods (with or without arguments, with or without return)"

#: src/lessons/welcome/Main.html:13
msgid "Tableaux"
msgstr "Arrays"

#: src/lessons/welcome/Environment.html:1
msgid "Bienvenue dans le monde des buggles"
msgstr "Welcome in the Buggles' World"

#: src/lessons/welcome/Environment.html:3
msgid ""
"Vous venez de lancer le programme des buggles.  Il s'agit d'une plate-forme "
"pédagogique destinée à simplifier l'apprentissage du Java.  Il est constitué "
"d'un ensemble d'exercices groupés par leçons, que vous pouvez faire pas à "
"pas."
msgstr ""

#: src/lessons/welcome/Environment.html:10
msgid "Les <i>buggles</i> ? Qu'est ce que c'est ??"
msgstr ""

#: src/lessons/welcome/Environment.html:12
msgid ""
"Les buggles sont de petites bêtes qui obéissent aux ordres que vous leur "
"donnez. Dans chaque exercice, vous devez donner des ordres à vos buggles "
"pour faire en sorte que le monde ressemble à l'objectif de l'exercice."
msgstr ""

#: src/lessons/welcome/Environment.html:17
msgid "L'environnement de travail"
msgstr ""

#: src/lessons/welcome/Environment.html:19
msgid ""
"Avant d'aller plus loin, familiarisez vous avec l'environnement de travail.  "
"La fenêtre principale (celle que vous voyez) est composée de 5 éléments "
"principaux:"
msgstr ""

#: src/lessons/welcome/Environment.html:25
msgid ""
"<b>Le menu :</b> Placé en haut de la fenêtre, il vous permet de quitter le "
"programme, et d'accéder à certaines commandes avancées que nous détaillerons "
"plus tard."
msgstr ""

#: src/lessons/welcome/Environment.html:30
msgid ""
"<b>La barre de commandes : </b> Placée juste en dessous du menu, celle-ci "
"vous donne accès aux quatre commandes principales :"
msgstr ""

#: src/lessons/welcome/Environment.html:36
msgid ""
"Le bouton <b>Start</b> qui lance la compilation et l'exécution du code que "
"vous aurez tapé dans l'éditeur.  A la fin de l'exécution, il vérifie que "
"vous arrivez bien à la situation finale de l'exercice. Si c'est le cas, vous "
"aurez accès à l'exercice suivant par le menu <b>Exercise</b>.  Sinon, il "
"vous faudra corriger votre code."
msgstr ""

#: src/lessons/welcome/Environment.html:45
msgid ""
"Le bouton <b>Stop</b> permet d'interrompre l'exécution de votre code, ce qui "
"est pratique si vous avez une <i>boucle infinie</i>."
msgstr ""

#: src/lessons/welcome/Environment.html:49
msgid ""
"Le bouton <b>Reset</b> permet de remettre le monde dans son état initial."
msgstr ""

#: src/lessons/welcome/Environment.html:51
msgid ""
"Le bouton <b>Demo</b> vous montre l'exécution de la solution attendue. "
"Pendant l'exécution, vous êtes autorisés à changer de monde afin de voir les "
"différentes exécutions attendues."
msgstr ""

#: src/lessons/welcome/Environment.html:53
msgid ""
"Le menu déroulant <b>Lesson</b>, vous permet de choisir la leçon que vous "
"souhaitez étudier"
msgstr ""

#: src/lessons/welcome/Environment.html:56
msgid ""
"Le menu déroulant <b>Exercise</b>, vous permet de changer d'exercice quand "
"vous le souhaitez. Notez que certaines leçons vous imposent de finir un "
"exercice avant de pouvoir commencer le suivant."
msgstr ""

#: src/lessons/welcome/Environment.html:63
msgid ""
"<b>Les onglets de consigne et d'édition :</b> C'est ici que vous lisez le "
"texte actuel.  Cette zone contient plusieurs onglets, auxquels on peut "
"accéder en cliquant sur leur nom en haut à gauche.  Le premier onglet (qui "
"est toujours intitulé <b>Mission</b>)  contient une présentation de "
"l'exercice en cours.  Pour résoudre un exercice, vous devez écrire votre "
"code dans les autres onglets.  Par exemple, vous pouvez maintenant cliquer "
"sur l'onglet <b>Source Code</b> pour voir le code actuel.  Il est vide, car "
"il n'y a rien à faire pour cet exercice de prise en main de l'environnement."
msgstr ""

#: src/lessons/welcome/Environment.html:75
msgid ""
"<b>La console :</b> Placée sous les onglets, c'est ici que s'afficheront "
"tous les messages de l'application. Cette zone est initialement vide et "
"blanche."
msgstr ""

#: src/lessons/welcome/Environment.html:79
msgid ""
"<b>La vue du monde :</b> Placée à droite des onglets, elle est constituée de "
"quatre éléments:"
msgstr ""

#: src/lessons/welcome/Environment.html:85
msgid ""
"Un menu déroulant permettant de choisir un monde. En effet, le programme que "
"vous devez écrire sera parfois exécuté dans plusieurs monde pour vous "
"confronter à différentes situations. Ce menu déroulant vous permettra de "
"choisir le monde que vous souhaitez voir."
msgstr ""

#: src/lessons/welcome/Environment.html:92
msgid ""
"Un onglet <b>World</b> qui représente la vue du monde actuellement "
"sélectionné (dans le menu déroulant. Cette vue est constituée d'une grille "
"représentant les différentes cases du monde, ainsi que d'une ou plusieurs "
"<i>buggle</i> qui attend vos ordres."
msgstr ""

#: src/lessons/welcome/Environment.html:99
msgid ""
"Un onglet <b>Objective</b> qui permet d'afficher la vue du monde tel qu'il "
"doit être à la fin de l'exercice."
msgstr ""

#: src/lessons/welcome/Environment.html:104
msgid ""
"<b>Les contrôles interactifs</b> Placés sous la vue du monde, ces boutons "
"vous permettent de contrôler interactivement les buggles.  Vous pouvez ainsi "
"essayer d'amener la buggle à l'objectif du scénario <i>à la main</i> avant "
"d'écrire le code nécessaire dans l'éditeur."
msgstr ""

#: src/lessons/welcome/Environment.html:113
msgid ""
"Un menu déroulant permettant de sélectionner la buggle que vous souhaitez "
"contrôler."
msgstr ""

#: src/lessons/welcome/Environment.html:116
msgid "Le bouton <b>Forward</b> fait avancer votre buggle d'un pas."
msgstr ""

#: src/lessons/welcome/Environment.html:119
msgid "Le bouton <b>Backward</b> fait reculer votre buggle d'un pas."
msgstr ""

#: src/lessons/welcome/Environment.html:122
msgid ""
"Le bouton <b>Turn left</b> demande à votre buggle de tourner vers la gauche."
msgstr ""

#: src/lessons/welcome/Environment.html:125
msgid ""
"Le bouton <b>Turn right</b> demande à votre buggle de tourner vers la droite."
msgstr ""

#: src/lessons/welcome/Environment.html:128
msgid ""
"Le bouton <b>Mark</b> demande à votre buggle de faire un trait au sol quand "
"elle avance."
msgstr ""

#: src/lessons/welcome/Environment.html:137
msgid "Que dois-je faire ?"
msgstr ""

#: src/lessons/welcome/Environment.html:139
msgid ""
"L'objectif de chaque exercice est donc de taper du code dans l'onglet de "
"l'éditeur afin de donner les ordres nécessaires à la buggle pour atteindre "
"son objectif."
msgstr ""

#: src/lessons/welcome/Environment.html:144
msgid ""
"Ce code doit naturellement être écrit en Java.  S'il contient des erreurs, "
"un message sera affiché dans la console par le compilateur, et il vous "
"faudra corriger avant de tenter de l'exécuter."
msgstr ""

#. Effacez maintenant  le  contenu de  l'onglet
#.   <b>Source Code</b> avant de continuer.
#: src/lessons/welcome/Environment.html:149
msgid ""
"Essayez par exemple d'écrire quelque chose dans l'éditeur (onglet <b>Source "
"Code</b>) comme <tt>bonjour</tt>, puis de cliquer sur <b>Start</b>.  Les "
"messages qui s'affichent peuvent vous sembler obscures au premier abord, "
"mais ne vous inquiétez pas : nous verrons leur signification au fur et à "
"mesure."
msgstr ""

#: src/lessons/welcome/Environment.html:157
msgid "Et maintenant ?"
msgstr ""

#: src/lessons/welcome/Environment.html:159
msgid ""
"Pour ce premier exercice, vous n'avez rien à faire : le monde initial est "
"l'objectif à atteindre. Vous n'avez donc pas de code à écrire.  Après avoir "
"visité l'interface et joué un peu avec les contrôles interactifs, appuyez "
"sur le bouton <b>Start</b>. Une fenêtre apparaît pour vous informez que vous "
"avez remplit le contrat de l'exercice."
msgstr ""

#: src/lessons/welcome/Environment.html:167
msgid ""
"Vous pouvez alors passez à l'exercice suivant en utilisant le menu adéquat "
"(<b>Exercise</b>)."
msgstr ""

#: src/lessons/welcome/Basics.html:1
msgid "Découverte du Java"
msgstr ""

#: src/lessons/welcome/Basics.html:3
msgid ""
"Nous allons maintenant écrire notre tout premier programme Java. Dans un "
"programme informatique (en Java ou autre), on trouve deux choses : les "
"<b>données</b>, et les <b>instructions</b> qui manipulent ces données."
msgstr ""

#: src/lessons/welcome/Basics.html:5
msgid "Les données en Java"
msgstr ""

#: src/lessons/welcome/Basics.html:6
msgid ""
"Java permet d'utiliser différents <i>types</i> de données, tels que les "
"entiers, les nombres à virgules ou les chaînes de caractères. Si on veut "
"utiliser une donnée plusieurs fois, il faut la stocker dans une <i>variable</"
"i>, qui est une sorte de case contenant une valeur. Java est un langage "
"<i>typé</i>, ce qui veut dire que l'on ne peut stocker une valeur que dans "
"une variable du bon type. Pas question de stocker une chaîne de caractères "
"dans une variable entière."
msgstr ""

#: src/lessons/welcome/Basics.html:8
msgid ""
"Pour <i>déclarer</i> (i.e. créer) une variable, il suffit d'écrire son type, "
"un espace et le nom de la variable.  Parmi les types existants, on trouve: "
"<b>int</b> pour les entiers, <b>double</b> pour les nombres à virgule, "
"<b>boolean</b> pour les booléens (i.e. les variables qui peuvent être soit "
"vraies soit fausses) et <b>String</b> pour les chaînes de caractères.  Si "
"l'on veut, on peut faire suivre la déclaration du signe = suivi de la valeur "
"initiale à donner à la valeur."
msgstr ""

#: src/lessons/welcome/Basics.html:11
msgid ""
"Ainsi, pour créer une variable nommée <b>x</b> contenant des entiers, on "
"écrira :"
msgstr ""

#: src/lessons/welcome/Basics.html:11
#, no-wrap
msgid "int x;"
msgstr ""

#: src/lessons/welcome/Basics.html:12
msgid "Si on veut que sa valeur initiale soit 5, on écrira :"
msgstr ""

#: src/lessons/welcome/Basics.html:12
#, no-wrap
msgid "int x = 5;"
msgstr ""

#: src/lessons/welcome/Basics.html:13
msgid ""
"Plus tard dans le programme, si l'on souhaite <i>affecter</i> une nouvelle "
"valeur à la variable, c'est très simple :"
msgstr ""

#: src/lessons/welcome/Basics.html:15
#, no-wrap
msgid "x=3; <span class=\"comment\">ceci remplace la valeur de x par 3</span>"
msgstr ""

#: src/lessons/welcome/Basics.html:17
msgid "Généralités sur les instructions"
msgstr ""

#: src/lessons/welcome/Basics.html:17
msgid ""
"<a name=\"generalites\"> Le programme Java le plus simple est formé d'une "
"suite d'instructions, séparées par des points-virgules. Il faut le "
"comprendre comme une suite d'ordres simples que l'on donne à la machine. "
"C'est assez comparable à une recette de cuisine où l'on dit <i>cassez les "
"oeufs puis ajoutez du sel puis mélangez le tout puis faites cuire</i>."
msgstr ""

#: src/lessons/welcome/Basics.html:19
msgid "Les affectations de variables comme"
msgstr ""

#: src/lessons/welcome/Basics.html:19
#, no-wrap
msgid "x=5"
msgstr ""

#: src/lessons/welcome/Basics.html:19
msgid ""
"sont les instructions les plus simples. L'autre type classique d'instruction "
"en Java est l'<i>appel à une méthode</i>. Nous verrons plus tard comment "
"définir de telles méthodes, disons simplement pour l'instant qu'il s'agit "
"des ordres disponibles. La syntaxe est en général est :"
msgstr ""

#: src/lessons/welcome/Basics.html:20
#, no-wrap
msgid "nomDeLaMethode()"
msgstr ""

#: src/lessons/welcome/Basics.html:21
msgid "L'exemple ci-dessus de recette s'écrirait donc ainsi à peu près ainsi:"
msgstr ""

#: src/lessons/welcome/Basics.html:23
#, no-wrap
msgid ""
"casserLesOeufs();\n"
"ajouterDuSel();\n"
"melangerLeTout();\n"
"faireCuire();\n"
msgstr ""

#: src/lessons/welcome/Basics.html:29
msgid "Les instructions en Java"
msgstr ""

#: src/lessons/welcome/Basics.html:29
msgid ""
"<a name=\"instructions\"> Bien entendu, ces méthodes n'existent pas en Java, "
"et il est difficile de faire la liste des méthodes existantes en Java. Dans "
"BuggleQuest, les instructions les plus souvent utilisées sont des appels à "
"des méthodes de la buggle, par lesquelles on donne des ordres à la buggle "
"qui les reçoit."
msgstr ""

#: src/lessons/welcome/Basics.html:31
msgid ""
"Par exemple, il y a une méthode pour chaque bouton du contrôle interactif.  "
"Pour faire la même chose que le bouton <b>forward</b> (faire avancer la "
"buggle d'un pas), il faut écrire dans l'éditeur :"
msgstr ""

#: src/lessons/welcome/Basics.html:32 src/lessons/welcome/Basics.html:63
#, no-wrap
msgid "forward();"
msgstr ""

#: src/lessons/welcome/Basics.html:33
msgid ""
"De même, pour faire l'équivalent des boutons <b>backward</b>, <b>turn left</"
"b> et <b>turn right</b>, il faut utiliser respectivement :"
msgstr ""

#: src/lessons/welcome/Basics.html:35
#, no-wrap
msgid ""
"backward();\n"
"turnLeft();\n"
"turnRight();\n"
msgstr ""

#: src/lessons/welcome/Basics.html:39
msgid ""
"Le bouton <b>mark</b> est un peu particulier, puisqu'il correspond à deux "
"méthodes : la première lève le crayon, tandis que la seconde le baisse."
msgstr ""

#: src/lessons/welcome/Basics.html:41
#, no-wrap
msgid ""
"brushDown();\n"
"brushUp();\n"
msgstr ""

#: src/lessons/welcome/Basics.html:44
msgid ""
"La buggle offre d'autres méthodes, que nous verrons lorsque le besoin s'en "
"fera sentir."
msgstr ""

#: src/lessons/welcome/Basics.html:46
msgid "Ajouter des commentaires"
msgstr ""

#: src/lessons/welcome/Basics.html:47
msgid ""
"Quand on écrit un programme un peu complexe, il est parfois utile d'ajouter "
"des <i>commentaires</i> pour simplifier la relecture du code après coup. Il "
"existe trois types de commentaires en Java:"
msgstr ""

#: src/lessons/welcome/Basics.html:49
msgid ""
"<b>Commentaires sur une seule ligne</b>. Dès que le compilateur rencontre le "
"symbole //, il ignore la fin de la ligne."
msgstr ""

#: src/lessons/welcome/Basics.html:50
msgid ""
"<b>Commentaires sur plusieurs lignes</b>. Le compilateur ignore tout ce qui "
"se trouve entre les symboles /* et */, même s'ils sont sur des lignes "
"différentes"
msgstr ""

#: src/lessons/welcome/Basics.html:53
#, no-wrap
msgid ""
"appelMethodeLuParLeCompilateur(); <span class=\"comment\"> // tout ceci est ignoré</span>\n"
"autreAppel(); <span class=\"comment\">/* ceci est</span>\n"
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"comment\"> également ignoré */</span>\n"
"encoreUnAppel();\n"
msgstr ""

#: src/lessons/welcome/Basics.html:59
msgid ""
"Il existe une troisième forme de commentaires, entre /** et */, qui sont lus "
"par un programme nommé JavaDoc pour générer automatiquement la documentation "
"expliquant comment utiliser le code. Ces commentaires doivent suivre un "
"formalisme précis."
msgstr ""

#: src/lessons/welcome/Basics.html:61 src/lessons/welcome/Basics3Pas.html:6
#: src/lessons/welcome/BasicsDrawG.html:8
#: src/lessons/welcome/Conditions.html:46
#: src/lessons/welcome/LoopWhile.html:21
#: src/lessons/welcome/LoopDoWhile.html:8
#: src/lessons/welcome/Variables.html:40 src/lessons/welcome/LoopFor.html:52
#: src/lessons/welcome/Methods.html:51
#: src/lessons/welcome/MethodsDogHouse.html:38
#: src/lessons/welcome/MethodsReturning.html:43
#: src/lessons/welcome/MethodsArgs.html:55 src/lessons/welcome/BDR.html:136
#: src/lessons/welcome/BDR2.html:116 src/lessons/welcome/SlugHunting.html:34
#: src/lessons/maze/RandomMouseMaze.html:22
#: src/lessons/maze/WallFollowerMaze.html:11
#: src/lessons/maze/PledgeMaze.html:22
msgid "Objectif de cet exercice"
msgstr ""

#: src/lessons/welcome/Basics.html:61
msgid ""
"<a name\"Objectifs\"> Nous allons faire le programme Java pour buggle le "
"plus simple existant : vous devez faire en sorte que la buggle avance d'un "
"pas."
msgstr ""

#: src/lessons/welcome/Basics.html:63
msgid ""
"Pour cela, écrivez simplement dans l'éditeur (onglet <b>Source Code</b>) le "
"code suivant :"
msgstr ""

#: src/lessons/welcome/Basics.html:64
msgid ""
"N'oubliez pas le point-virgule, qui indique au compilateur que l'instruction "
"est finie."
msgstr ""

#: src/lessons/welcome/Basics.html:65
msgid ""
"Après avoir recopié le code dans l'éditeur, cliquez sur <b>run</b> et passez "
"à l'exercice suivant."
msgstr ""

#: src/lessons/welcome/Basics3Pas.html:1
msgid "Découverte du Java (2)"
msgstr ""

#: src/lessons/welcome/Basics3Pas.html:3
msgid ""
"En se basant sur les acquis de la leçon précédente, nous allons essayer de "
"résoudre différents petits problèmes.  Voici le premier."
msgstr ""

#: src/lessons/welcome/Basics3Pas.html:6
msgid "<a name=\"Objectifs\"> Faites avancer votre buggle de 3 pas."
msgstr ""

#: src/lessons/welcome/BasicsDrawG.html:1
msgid "Découverte du Java (3)"
msgstr ""

#: src/lessons/welcome/BasicsDrawG.html:3
msgid ""
"Bien sûr, les buggles ne sont pas condamnées à se déplacer en ligne droite. "
"Elles savent également tourner à gauche ou à droite (avec les méthodes "
"<code>turnLeft()</code> et <code>turnRight()</code>) ou reculer (avec "
"<code>backward()</code>)."
msgstr ""

#: src/lessons/welcome/BasicsDrawG.html:8
msgid ""
"<a name=\"Objectifs\"> Faites dessiner &agrave; votre buggle la lettre G."
msgstr ""

#: src/lessons/welcome/BasicsDrawG.html:11
msgid ""
"N'hésitez pas à consulter la vue du monde attendu pour connaître la forme "
"exacte de la lettre."
msgstr ""

#: src/lessons/welcome/Conditions.html:1
msgid "Instructions conditionnelles"
msgstr ""

#: src/lessons/welcome/Conditions.html:3
msgid ""
"Les programmes faits d'une simple suite d'instructions comme celui de "
"l'exercice précédent sont bien ennuyeux. Ils font toujours la même chose, et "
"ne peuvent pas réagir aux conditions extérieurs. Une <b>instruction "
"conditionnelle</b> permet au programme de s'adapter en disant quelque chose "
"comme <i>S'il pleut, prend un parapluie</i>."
msgstr ""

#: src/lessons/welcome/Conditions.html:5
msgid "La syntaxe Java est la suivante :"
msgstr ""

#: src/lessons/welcome/Conditions.html:6
#, no-wrap
msgid ""
"if (<b>condition</b>) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;<b>quoiFaire();</b>\n"
"}"
msgstr ""

#: src/lessons/welcome/Conditions.html:9
msgid ""
"Si la condition est vraie, tout le code compris entre le { et le } "
"correspondant sera exécuté. Si non, il sera ignoré. Bien entendu, il est "
"possible d'écrire plusieurs instructions entre les deux accolades (voire un "
"autre test)."
msgstr ""

#: src/lessons/welcome/Conditions.html:11
msgid ""
"Une condition peut être une variable de type <tt>boolean</tt>. Le code entre "
"accolade sera exécuté si la variable vaut la valeur <tt>true</tt> (vrai), et "
"il sera ignoré si elle vaut <tt>false</tt> (faux)."
msgstr ""

#: src/lessons/welcome/Conditions.html:13
msgid ""
"La condition peut aussi être un test arithmétique, comme <tt>x</tt> <b>==</"
"b> <tt>5</tt>, qui vérifie si la valeur actuelle de <tt>x</tt> est 5, ou "
"bien comme <b>!=</b> (teste l'inégalité), <b>&lt;</b> (inférieur à), <b>&gt;"
"</b> (supérieur à), <b>&lt;=</b> (inférieur ou égal à), <b>&gt;=</b> "
"(supérieur ou égal à)."
msgstr ""

#: src/lessons/welcome/Conditions.html:19
msgid ""
"Attention au piège classique, qui consiste à tester l'égalité d'une variable "
"avec = au lieu de ==. Heureusement, le compilateur Java vous indique le plus "
"souvent ce problème, mais pas tout le temps. Si la variable est de type "
"booléen, il peut se faire prendre au piège, et il convient donc d'être "
"attentif..."
msgstr ""

#: src/lessons/welcome/Conditions.html:25
msgid ""
"La condition peut également être un appel à certaines méthodes "
"particulières, dont le résultat est un booléen. Par exemple, la méthode "
"<tt>isFacingWall()</tt> de la buggle renvoie vrai si la buggle est face à un "
"mur, et faux sinon."
msgstr ""

#: src/lessons/welcome/Conditions.html:30
msgid ""
"Enfin, il est possible de construire une condition composée de plusieurs "
"sous-conditions reliées par des opérations booléennes."
msgstr ""

#: src/lessons/welcome/Conditions.html:32
msgid ""
"<tt>cond1 && cond2</tt> est vraie quand <tt>cond1</tt> <b>et</b> <tt>cond2</"
"tt> sont toutes deux vraies."
msgstr ""

#: src/lessons/welcome/Conditions.html:33
msgid ""
"<tt>cond1 || cond2</tt> est vraie si <tt>cond1</tt> <b>ou</b> <tt>cond2</tt> "
"est vraie (si <tt>cond1</tt> est vraie, <tt>cond2</tt> n'est même pas "
"évaluée)."
msgstr ""

#: src/lessons/welcome/Conditions.html:34
msgid "<tt>!cond</tt> est vraie si <tt>cond</tt> ne l'est pas."
msgstr ""

#: src/lessons/welcome/Conditions.html:35
msgid ""
"On peut forcer l'ordre d'évaluation en ajoutant des parenthèses. En cas de "
"doute, n'hésitez pas à mettre plus de parenthèses que nécessaire pour lever "
"les ambiguïtés sur l'ordre d'évaluation."
msgstr ""

#: src/lessons/welcome/Conditions.html:38
msgid ""
"Pour finir, il est possible de spécifier ce qu'il faut faire quand la "
"condition est fausse, en utilisant la syntaxe suivante :"
msgstr ""

#: src/lessons/welcome/Conditions.html:39
#, no-wrap
msgid ""
"if (<b>condition</b>) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;<b>quoiFaireSiLaConditionEstVraie();</b>\n"
"} else {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;<b>quoiFaireSinon();</b>\n"
"}"
msgstr ""

#: src/lessons/welcome/Conditions.html:46
msgid ""
"<a name=\"Objectifs\"> Si la buggle est face à un mur (prédicat "
"<tt>isFacingWall()</tt>), il faut reculer d'un pas. Sinon, il faut avancer "
"d'un pas."
msgstr ""

#: src/lessons/welcome/Conditions.html:49
msgid ""
"Cet exercice est un peu particulier : il faut que votre programme fonctionne "
"pour plusieurs buggles, chacune étant dans une situation initiale "
"différente. Le même code sera utilisé pour chacune d'entre elles."
msgstr ""

#: src/lessons/welcome/Conditions.html:54
#: src/lessons/welcome/LoopWhile.html:26
#: src/lessons/welcome/LoopDoWhile.html:20
msgid "Quand votre programme fonctionne, passez à l'exercice suivant."
msgstr ""

#: src/lessons/welcome/LoopWhile.html:1
msgid "Boucles tant que<tt> (while)</tt>"
msgstr ""

#: src/lessons/welcome/LoopWhile.html:3
msgid ""
"En plus des instructions conditionnelles, une autre construction pratique "
"est de pouvoir demander à la buggle de répéter une action tant qu'une "
"condition particulière n'est pas arrivée. On utilise pour cela une boucle "
"<tt>while</tt>, dont la syntaxe Java est la suivante :"
msgstr ""

#: src/lessons/welcome/LoopWhile.html:4
#, no-wrap
msgid ""
"while (<b>condition</b>) {\n"
"&nbsp;&nbsp;<b>action()</b>;\n"
"}"
msgstr ""

#: src/lessons/welcome/LoopWhile.html:8
msgid ""
"Evidement, si l'action en question ne modifie pas la valeur de la condition, "
"la buggle va exécuter l'action à l'infini. C'est dans ce genre de cas que le "
"bouton <b>stop</b> de l'interface devient utile. Pour tester cela, vous "
"pouvez essayer de taper le code suivant dans l'éditeur :"
msgstr ""

#: src/lessons/welcome/LoopWhile.html:14
#, no-wrap
msgid ""
"while (true) {\n"
"&nbsp;&nbsp;turnLeft();\n"
"}"
msgstr ""

#: src/lessons/welcome/LoopWhile.html:18
msgid ""
"La buggle va tourner vers la gauche tant que <code>true</code> est vrai "
"(sans fin donc) jusqu'à ce que vous l'arrêtiez manuellement avec le bouton "
"stop."
msgstr ""

#: src/lessons/welcome/LoopWhile.html:21
msgid ""
"<a name=\"Objectifs\"> Il vous faut maintenant écrire le code nécessaire "
"pour que vos buggles avancent jusqu'à rencontrer un mur. L'idée est donc de "
"faire :"
msgstr ""

#: src/lessons/welcome/LoopWhile.html:23
#, no-wrap
msgid ""
"tant que l'on est pas face à un mur, faire :\n"
"&nbsp;&nbsp;avancer();"
msgstr ""

#: src/lessons/welcome/LoopDoWhile.html:1
msgid "Boucles jusqu'à<tt> (do ... while)</tt>"
msgstr ""

#: src/lessons/welcome/LoopDoWhile.html:3
msgid ""
"Dans une instruction <tt>while</tt>, la condition est évaluée avant toute "
"chose, et si elle est fausse, le corps de la boucle n'est jamais exécuté. Il "
"arrive que l'on veuille que le corps de la boucle soit évalué au moins une "
"fois, même si la condition est initialement fausse. On utilise pour cela une "
"variante de la boucle <tt>while</tt>, dont la syntaxe Java est la suivante :"
msgstr ""

#: src/lessons/welcome/LoopDoWhile.html:4
#, no-wrap
msgid ""
"do {\n"
"&nbsp;&nbsp;<b>action()</b>;\n"
"} while (<b>condition</b>);"
msgstr ""

#: src/lessons/welcome/LoopDoWhile.html:8
msgid ""
"<a name=\"Objectifs\"> Certaines cases du monde sont jaunes, mais votre "
"buggle ne supporte pas de s'y trouver comme c'est son cas actuellement. "
"Écrivez le code lui permettant d'avancer jusqu'à se trouver sur une case "
"blanche. Vous utiliserez pour cela la méthode isGroundWhite(), que seule la "
"buggle de cet exercice connaît."
msgstr ""

#: src/lessons/welcome/LoopDoWhile.html:15
msgid "L'idée général est donc de faire:"
msgstr ""

#: src/lessons/welcome/LoopDoWhile.html:16
#, no-wrap
msgid "avancer jusqu'à se trouver sur une case blanche"
msgstr ""

#: src/lessons/welcome/LoopDoWhile.html:18
msgid ""
"<i>Remarque :</i> il est également possible de résoudre cet exercice avec "
"une boucle <tt>while</tt> classique, mais ce n'est pas l'objectif."
msgstr ""

#: src/lessons/welcome/Variables.html:1
msgid "Variables"
msgstr ""

#: src/lessons/welcome/Variables.html:3
msgid ""
"Nous avons vu que les variables étaient des cases mémoire de l'ordinateur "
"dans lequel on peut stocker une valeur. En Java, chaque variable a un type "
"particulier, qui peut être par exemple <code>int</code> pour stocker des "
"nombres entiers, <code>boolean</code> pour des booléens, <code>double</code> "
"pour des nombres à virgule ou encore <code>String</code> pour des chaînes de "
"caractères."
msgstr ""

#: src/lessons/welcome/Variables.html:11
msgid ""
"La syntaxe pour créer une variable entière <code>x</code> de valeur initiale "
"4 est la suivante :"
msgstr ""

#: src/lessons/welcome/Variables.html:13
#, no-wrap
msgid "int x = 4;"
msgstr ""

#: src/lessons/welcome/Variables.html:14
msgid "Un autre exemple avec des chaînes de caractères :"
msgstr ""

#: src/lessons/welcome/Variables.html:15
#, no-wrap
msgid "String hello = \"Bonjour\";"
msgstr ""

#: src/lessons/welcome/Variables.html:17
msgid ""
"Pour affecter une nouvelle valeur à une variable, il suffit d'utiliser le "
"symbole = :"
msgstr ""

#: src/lessons/welcome/Variables.html:18
#, no-wrap
msgid "x = 3;"
msgstr ""

#: src/lessons/welcome/Variables.html:20
msgid ""
"À droite du signe égal, on peut mettre une opération arithmétique "
"quelconque, qui peut contenir des constantes ou des variables :"
msgstr ""

#: src/lessons/welcome/Variables.html:23
#, no-wrap
msgid ""
"x = 3 + 2;\n"
"x = 3 * x;\n"
"hello = \"Salut \"+\"à \"+\"tous !\";\n"
msgstr ""

#: src/lessons/welcome/Variables.html:28
msgid "Les baggles"
msgstr ""

#: src/lessons/welcome/Variables.html:30
msgid ""
"Le monde des buggles contient parfois des <i>baggles</i>, sorte de petits "
"biscuits que les buggles peuvent déplacer d'un endroit à un autre. Pour "
"cela, elles peuvent utiliser les fonctions suivantes :"
msgstr ""

#: src/lessons/welcome/Variables.html:34
#, no-wrap
msgid ""
"isOverBaggle() <span class=\"comment\">/* test booléen pour savoir si la buggle marche sur un baggle */</span>\n"
"isCarryingBaggle() <span class=\"comment\">/* test booléen pour savoir si la buggle porte un baggle */</span>\n"
"pickUpBaggle() <span class=\"comment\">/* ramasse le baggle au sol (attention, s'il n'y a pas de baggle, ça pose problème) */</span>\n"
"dropBaggle() <span class=\"comment\">/* pose le baggle transporté (attention, ça pose problème si on ne porte pas de \n"
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;baggle, ou s'il y en a déjà un par terre) */</span>"
msgstr ""

#: src/lessons/welcome/Variables.html:40
msgid ""
"<a name=\"Objectifs\"> Il est temps de faire un exercice un peu plus dur, "
"n'est ce pas ? L'objectif cette fois est d'avancer jusqu'au baggle qui se "
"trouve devant la buggle, le ramasser, revenir à la position initiale, puis "
"de poser le baggle."
msgstr ""

#: src/lessons/welcome/Variables.html:47 src/lessons/welcome/BDR.html:165
msgid "Indications"
msgstr ""

#: src/lessons/welcome/Variables.html:47
msgid "<a name=\"Indications\">"
msgstr ""

#: src/lessons/welcome/Variables.html:48
msgid ""
"Pour résoudre ce problème, il faut le décomposer en parties que vous savez "
"résoudre. Par exemple, on peut vouloir faire les étapes suivantes :"
msgstr ""

#: src/lessons/welcome/Variables.html:52
msgid "Avancer jusqu'à se trouver sur un baggle"
msgstr ""

#: src/lessons/welcome/Variables.html:53
msgid "Ramasser le baggel au sol"
msgstr ""

#: src/lessons/welcome/Variables.html:54
msgid "Reculer du même nombre de cases que ce qu'on a avancé"
msgstr ""

#: src/lessons/welcome/Variables.html:57
msgid ""
"Bien entendu, il est impossible de reculer du bon nombre de case à l'étape 3 "
"si l'on a pas compté le nombre de pas faits à la première étape. On va pour "
"cela utiliser une variable, que l'on peut nommer <code>nbPas</code>."
msgstr ""

#: src/lessons/welcome/Variables.html:62
msgid ""
"On crée cette variable (de type <code>int</code>) avant l'étape 1, on "
"l'initialise à 0, et chaque fois qu'on avance d'un pas, on l'incrémente de 1 "
"(<code>nbPas = nbPas + 1;</code> ou <code>nbPas++;</code>, les deux "
"écritures sont équivalentes)."
msgstr ""

#: src/lessons/welcome/Variables.html:67
msgid ""
"Ensuite, l'étape 3 consiste simplement à créer une nouvelle variable entière "
"<code>dejaFait</code> initialisée à zéro, et reculer d'un pas tant que "
"<code>dejaFait</code> n'est pas égal à <code>nbPas</code>, en incrémentant "
"<code>dejaFait</code> à chaque fois."
msgstr ""

#: src/lessons/welcome/Variables.html:73
msgid ""
"Attention, il est interdit d'utiliser des caractères accentués dans les noms "
"de variables Java. Vous pouvez donc nommer votre variable <code>dejaFait</"
"code>, mais <code>déjaFait</code> n'est pas un nom valide."
msgstr ""

#: src/lessons/welcome/Variables.html:78
msgid "À vous de jouer !"
msgstr ""

#: src/lessons/welcome/LoopFor.html:1
msgid "Boucles pour<tt> (for)</tt>"
msgstr ""

#: src/lessons/welcome/LoopFor.html:3
msgid ""
"Les boucles <tt>while</tt> sont bien adaptées aux situations où l'on veut "
"réaliser une action tant qu'une condition est réalisée, mais elles sont "
"moins pratiques pour réaliser une action un nombre prédéterminé de fois. Par "
"exemple, lorsque nous voulions reculer de <code>nbPas</code> dans l'exercice "
"précédent, il fallait créer une nouvelle variable, l'initialiser, et "
"demander à reculer tant que <code>nbPas</code> n'était pas nul, en "
"décrémentant cette variable à la main à la fin du corps de la boucle."
msgstr ""

#: src/lessons/welcome/LoopFor.html:12
msgid ""
"Dans ce genre de cas, les boucles de type <code>for</code> sont plus "
"pratique. Leur syntaxe est la suivante :"
msgstr ""

#: src/lessons/welcome/LoopFor.html:13
#, no-wrap
msgid ""
"for (<b>initialisation</b>; <b>condition</b>; <b>incrémentation</b>) {\n"
"&nbsp;&nbsp;&nbsp;<b>action</b>();\n"
"}"
msgstr ""

#: src/lessons/welcome/LoopFor.html:17
msgid "Ce code est parfaitement équivalent à celui-ci :"
msgstr ""

#: src/lessons/welcome/LoopFor.html:18
#, no-wrap
msgid ""
"<b>initialisation</b>;\n"
"while (<b>condition</b>) {\n"
"&nbsp;&nbsp;&nbsp;<b>action</b>();\n"
"&nbsp;&nbsp;&nbsp;<b>incrémentation</b>;\n"
"}"
msgstr ""

#: src/lessons/welcome/LoopFor.html:24
msgid ""
"Par exemple, les deux codes suivants sont équivalents. Avouez que la seconde "
"forme est plus lisible, non ?"
msgstr ""

#: src/lessons/welcome/LoopFor.html:27
#, no-wrap
msgid ""
"int dejaFait = 0;\n"
"while (dejaFait &lt; nbPas) {\n"
"&nbsp;&nbsp;&nbsp;backward();\n"
"&nbsp;&nbsp;&nbsp;dejaFait++;\n"
"}"
msgstr ""

#: src/lessons/welcome/LoopFor.html:32
#, no-wrap
msgid ""
"for (int dejaFait = 0; dejaFait &lt; nbPas; dejaFait++) {\n"
"&nbsp;&nbsp;&nbsp;backward();\n"
"}"
msgstr ""

#: src/lessons/welcome/LoopFor.html:36
msgid ""
"On peut imaginer des utilisations bien plus avancées des boucles <tt>for</"
"tt> car toute instruction valide peut être utilisée comme initialisation, "
"condition et incrémentation. L'exemple suivant est un peu extrême, "
"puisqu'elle calcule le PGCD de deux nombres sans avoir de corps de boucle du "
"tout, ni d'initialisation (tout est fait dans la condition et "
"l'incrémentation)."
msgstr ""

#: src/lessons/welcome/LoopFor.html:43
#, no-wrap
msgid ""
"int x=20, y=3, tmp;\n"
"for (; y!=0 ; tmp=x, x=y, y=tmp%y) { }\n"
" <span class=\"comment\">/* le PGCD est stocké dans x */</span>"
msgstr ""

#: src/lessons/welcome/LoopFor.html:47
msgid ""
"Si vous ne comprenez pas tous les détails de cet exemple, pas de panique, "
"c'est assez logique puisqu'il utilise des points de syntaxe que nous n'avons "
"pas encore vu."
msgstr ""

#: src/lessons/welcome/LoopFor.html:52
msgid ""
"<a name=\"Objectifs\"> Il s'agit de refaire le même exercice que "
"précédemment (avancer jusqu'à trouver un baggle, le ramasser, revenir là où "
"on était au début puis reposer le baggle), mais en utilisant une boucle "
"<tt>for</tt> pour revenir au point de départ à la place d'une boucle "
"<tt>while</tt>."
msgstr ""

#: src/lessons/welcome/LoopFor.html:59
msgid "Une fois ceci fait, passez à l'exercice suivant."
msgstr ""

#: src/lessons/welcome/Methods.html:1
msgid "Méthodes"
msgstr ""

#: src/lessons/welcome/Methods.html:3
msgid ""
"Nous allons maintenant voir comment écrire nos propres méthodes. Il s'agit "
"en quelque sorte d'étendre le vocabulaire de la buggle en lui apprenant à "
"faire de nouvelles choses."
msgstr ""

#: src/lessons/welcome/Methods.html:7
msgid ""
"Par exemple, nous avons vu à l'exercice précédent comment demander à la "
"buggle d'aller chercher la buggle qui se trouve devant elle, et la ramener à "
"sa position initiale. S'il y a maintenant plusieurs baggles sur le plateau, "
"et que nous voulons tous les ramener sur la ligne du bas, il faut soit "
"répéter ce code plusieurs fois, soit l'inclure dans une boucle. Dans les "
"deux cas, le code résultant n'est pas très lisible, et il serait mieux que "
"la buggle comprenne un ordre de type <code>vaChercher()</code> tout comme "
"elle comprend un <code>forward()</code>."
msgstr ""

#: src/lessons/welcome/Methods.html:18
msgid ""
"La syntaxe pour écrire une méthode simple nommée <code>vaChercher</code> est "
"la suivante:"
msgstr ""

#: src/lessons/welcome/Methods.html:19
#, no-wrap
msgid ""
"public void vaChercher() {\n"
"  actions();\n"
"  aFaire();\n"
"}"
msgstr ""

#: src/lessons/welcome/Methods.html:24
msgid ""
"Le corps de la méthode (entre les accolades) peut contenir autant "
"d'instructions que vous le souhaitez, et toutes les constructions vues "
"jusque là (for, while, if, etc)."
msgstr ""

#: src/lessons/welcome/Methods.html:28
msgid ""
"Nous reviendrons plus tard sur le sens exact du mot-clé <code>public</code>. "
"Disons simplement pour l'instant qu'il indique que tout le monde a le droit "
"d'utiliser cette méthode."
msgstr ""

#: src/lessons/welcome/Methods.html:33
msgid ""
"<code>void</code> indique quant à lui que la méthode ne donne pas de "
"résultat. Nous avions vu que la méthode <code>isOverBaggle()</code> renvoie "
"un booléen, et peut donc être utilisé comme une condition dans un if ou un "
"while. Cela signifie qu'elle a été déclarée de la façon suivante :"
msgstr ""

#: src/lessons/welcome/Methods.html:38
#, no-wrap
msgid "public boolean isOverBaggle() { ... }"
msgstr ""

#: src/lessons/welcome/Methods.html:40
msgid ""
"Nous verrons dans le prochain exercice comment faire ce genre de chose. Pour "
"l'instant, contentons nous d'écrire ce <code>void</code> à cet endroit."
msgstr ""

#: src/lessons/welcome/Methods.html:44
msgid ""
"En Java, il est d'usage de mettre la première lettre du nom d'une méthode en "
"minuscules, et de coller tous les mots décrivant la méthode les uns aux "
"autres en mettant une majuscule à chacun. Il est interdit de mettre des "
"espaces ou des accentués dans le nom d'une méthode. C'est pourquoi nous "
"écrivons \"va chercher\" sous la forme \"vaChercher\"."
msgstr ""

#: src/lessons/welcome/Methods.html:51
msgid ""
"<a name=\"Objectifs\"> L'objectif de cet exercice est donc d'écrire une "
"méthode nommée <code>vaChercher()</code> et qui fait la même chose qu'aux "
"exercices précédents (avance tant qu'on ne trouve pas de baggle, ramasser le "
"baggle, reculer à la case départ, poser le baggle)."
msgstr ""

#: src/lessons/welcome/Methods.html:58
msgid ""
"La particularité de cet exercice est que vous n'allez donc pas écrire "
"directement le code que la buggle va exécuter, mais une méthode qu'elle "
"utilisera. En fait, dans tous les exercices précédents, vous avez écrit le "
"corps d'une méthode particulière de la buggle nommée <code>run()</code> et "
"qui est invoquée par l'environnement quand on clique sur le bouton <b>Start</"
"b>."
msgstr ""

#: src/lessons/welcome/Methods.html:65
msgid ""
"N'essayez pas de définir ici cette méthode, puisque la buggle la connaît "
"déjà. Cela troublerait le compilateur qui vous donnerait un message d'erreur "
"en échange. Pour information, voici le corps de la méthode <code>run()</"
"code> de la buggle de cet exercice:"
msgstr ""

#: src/lessons/welcome/Methods.html:70
#, no-wrap
msgid ""
"public void run() {\n"
"&nbsp;&nbsp;for (int i=0; i&lt;7; i++) { \n"
"&nbsp;&nbsp;&nbsp;&nbsp;vaChercher();\n"
"&nbsp;&nbsp;&nbsp;&nbsp;turnRight();\n"
"&nbsp;&nbsp;&nbsp;&nbsp;forward();\n"
"&nbsp;&nbsp;&nbsp;&nbsp;turnLeft();\n"
"&nbsp;&nbsp;}\n"
"}"
msgstr ""

#: src/lessons/welcome/Methods.html:79
msgid ""
"Donc, votre buggle va répéter 7 fois (la taille du monde)  l'opération "
"<code>vaChercher()</code> que vous allez écrire, plus les opérations "
"nécessaire à se décaler d'une colonne vers la droite (tourner à droite, "
"avancer, tourner à gauche). Notez que la buggle va donc faire un pas vers la "
"droite alors qu'elle sera tout à droite du monde. Cela la ramènera sur le "
"bord gauche, car le monde des buggles est torique."
msgstr ""

#: src/lessons/welcome/Methods.html:86
msgid "À vous d'écrire cette méthode vaChercher()."
msgstr ""

#: src/lessons/welcome/MethodsDogHouse.html:1
msgid "Construire avec méthode"
msgstr ""

#: src/lessons/welcome/MethodsDogHouse.html:3
msgid ""
"Nous souhaitons maintenant apprendre à la buggle à se faire une niche.  La "
"première approche, la plus simple au premier abord, est d'écrire directement "
"le code permettant de le faire, comme ci-dessous (cela marche car la buggle "
"de cet exercice laisse une traînée rouge dans son sillage quand elle se "
"déplace)."
msgstr ""

#: src/lessons/welcome/MethodsDogHouse.html:10
#, no-wrap
msgid ""
"forward();\n"
"forward();\n"
"turnLeft(); \n"
"forward();\n"
"forward();\n"
"turnLeft(); \n"
"forward();\n"
"forward();\n"
"turnLeft(); \n"
"forward();\n"
"forward();\n"
"turnLeft(); \n"
msgstr ""

#: src/lessons/welcome/MethodsDogHouse.html:24
msgid ""
"Les problèmes commencent quand nous voulons faire faire deux cabanes à la "
"buggle : Il faut réécrire le code deux fois, ce qui n'est pas très pratique. "
"Pire que ça, une telle duplication de code est en général très mal vu. En "
"effet, si vous vous rendez compte que vous vous êtes trompé dans votre code, "
"et que vous l'avez recopier à plusieurs endroits, il va falloir le corriger "
"plusieurs fois. Et gare si vous oubliez de corriger un exemplaire."
msgstr ""

#: src/lessons/welcome/MethodsDogHouse.html:32
msgid ""
"Il est bien préférable de <b>factoriser votre code</b>, c'est-à-dire "
"d'écrire le code une seule fois, par exemple dans une méthode. C'est ce que "
"vous allez faire maintenant. Il est même possible d'aller plus loin en "
"factorisant le code de la méthode avec une boucle <code>for</code> comme vu "
"précédemment."
msgstr ""

#: src/lessons/welcome/MethodsDogHouse.html:38
msgid ""
"<a name=\"Objectifs\"> L'objectif de cet exercice est d'écrire une méthode "
"nommée <code>faireNiche()</code> et exécute le code ci-dessus. La buggle "
"invoquera plusieurs fois votre oeuvre afin de dessiner des cabanes un peu "
"partout. Pensez à factoriser le code de votre méthode avec une boucle for."
msgstr ""

#: src/lessons/welcome/MethodsDogHouse.html:45
#: src/lessons/welcome/Array.html:164 src/lessons/welcome/Array2.html:26
#: src/lessons/maze/RandomMouseMaze.html:45
#: src/lessons/maze/WallFollowerMaze.html:26
#: src/lessons/maze/PledgeMaze.html:38
msgid "À vous de jouer."
msgstr ""

#: src/lessons/welcome/MethodsReturning.html:1
msgid "Méthodes retournant un résultat"
msgstr ""

#: src/lessons/welcome/MethodsReturning.html:3
msgid ""
"Écrire des méthodes retournant un résultat n'est pas bien plus compliqué "
"qu'écrire une méthode n'en renvoyant pas. Il suffit d'une part de mettre le "
"type de la donnée renvoyée avant le nom de la méthode, et d'autre part "
"d'écrire dans le corps de la méthode une instruction <code>return</code> qui "
"précise ce qu'il faut renvoyer."
msgstr ""

#: src/lessons/welcome/MethodsReturning.html:9
#, no-wrap
msgid ""
"double pi() {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;return 3.14159;\n"
"}\n"
"boolean deuxEstIlPair() {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;return true;\n"
"}\n"
msgstr ""

#: src/lessons/welcome/MethodsReturning.html:17
msgid ""
"Il est possible d'avoir plusieurs instructions <code>return</code> dans "
"différentes branches de <code>if</code>. Ce qui est interdit, c'est d'avoir "
"une branche du code qui n'est pas terminée par un <code>return</code>, ou "
"d'écrire du code après le <code>return</code>."
msgstr ""

#: src/lessons/welcome/MethodsReturning.html:23
msgid ""
"En effet, si la machine arrive à la fin de la méthode sans avoir rencontré "
"de <tt>return</tt>, elle ne peut pas savoir quelle valeur communiquer à "
"celui qui a appelé la méthode. De plus, le <tt>return</tt> interrompt "
"immédiatement l'exécution de la méthode (pourquoi continuer à chercher quand "
"on a déjà trouvé le résultat de la méthode?). Donc, s'il y a du code après "
"un <tt>return</tt>, c'est sans doute une erreur, et le compilateur vous "
"l'indique."
msgstr ""

#: src/lessons/welcome/MethodsReturning.html:31
#, no-wrap
msgid ""
"boolean negation(boolean cond) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;if (cond == true) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;\n"
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">/* interdit d'écrire du code ici */</span>\n"
"&nbsp;&nbsp;&nbsp;&nbsp;} else {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;\n"
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">/* ici aussi */</span>\n"
"&nbsp;&nbsp;&nbsp;&nbsp;}\n"
"&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">/* même ici */</span>\n"
"}"
msgstr ""

#: src/lessons/welcome/MethodsReturning.html:43
msgid ""
"<a name=\"Objectifs\"> Vous allez encore une fois écrire une méthode qui "
"sera utilisée par la buggle. Son nom doit être <code>haveBaggle</code>, et "
"elle doit renvoyer un booléen indiquant si la colonne face à la buggle "
"contient un baggle ou non. Votre buggle va s'en servir pour chercher la "
"première colonne contenant un baggle et s'y arrêter."
msgstr ""

#: src/lessons/welcome/MethodsReturning.html:51
msgid ""
"Le plus simple pour écrire cette méthode est peut être d'utiliser une "
"variable booléenne <code>vuBaggle</code> indiquant si on a vu un baggle "
"jusque là. Initialement, elle contient faux."
msgstr ""

#: src/lessons/welcome/MethodsReturning.html:55
msgid ""
"Ensuite, on avance de 6 cases (le monde contient 7 cases, et on est déjà sur "
"l'une d'entre elles). Pour chaque case, si elle contient un baggle, on range "
"la valeur vrai dans <tt>vuBaggle</tt> (et on ne fait rien d'autre qu'avancer "
"si non)."
msgstr ""

#: src/lessons/welcome/MethodsReturning.html:60
msgid ""
"Quand on est arrivé à la fin, on recule de 6 cases, et on retourne le "
"contenu de <tt>vuBaggle</tt> à l'appelant."
msgstr ""

#: src/lessons/welcome/MethodsReturning.html:64
msgid ""
"Cet exercice est un peu particulier, puisqu'il a deux mondes initiaux, "
"chacun ayant un objectif particulier. C'est pourquoi la vue du monde est "
"placée dans un onglet : il s'agit des différents mondes initiaux sur lequel "
"sera testé votre code."
msgstr ""

#: src/lessons/welcome/MethodsReturning.html:69
msgid ""
"Quand votre méthode <tt>haveBaggle</tt> fonctionne, passez à l'exercice "
"suivant."
msgstr ""

#: src/lessons/welcome/MethodsArgs.html:1
msgid "Méthodes avec paramètres"
msgstr ""

#: src/lessons/welcome/MethodsArgs.html:3
msgid ""
"N'êtes vous pas fatigué d'écrire encore et encore le code qui permet "
"d'avancer ou de reculer d'un nombre prédéterminé pas ? Oui, mais écrire les "
"méthode <tt>forward2()</tt>, <tt>forward3()</tt>, <tt>forward4()</tt>, et "
"<tt>backward2()</tt>, <tt>backward3()</tt>, <tt>backward4()</tt>, et ainsi "
"de suite, ça ne constitue pas un réel gain de temps..."
msgstr ""

#: src/lessons/welcome/MethodsArgs.html:10
msgid ""
"Heureusement, il est possible de donner des <b>paramètres</b> à vos "
"méthodes. Il faut marquer leur type et leur nom entre les parenthèses qui "
"suivent le nom de la méthode. Ensuite, on peut les utiliser dans le corps de "
"la fonction comme s'il s'agissait de variables définies ici."
msgstr ""

#: src/lessons/welcome/MethodsArgs.html:16
#, no-wrap
msgid ""
"double diviseParDeux(double x) {\n"
"&nbsp;&nbsp;return x / 2;\n"
"}"
msgstr ""

#: src/lessons/welcome/MethodsArgs.html:20
msgid ""
"À l'usage, il faut indiquer les valeurs qu'elles doivent prendre entre les "
"parenthèses de l'appel."
msgstr ""

#: src/lessons/welcome/MethodsArgs.html:21
#, no-wrap
msgid "double y = diviseParDeux(3.14);"
msgstr ""

#: src/lessons/welcome/MethodsArgs.html:23
msgid ""
"Si on veut avoir plusieurs paramètres, il faut les séparer par des virgules, "
"lors de la déclaration comme lors de l'appel."
msgstr ""

#: src/lessons/welcome/MethodsArgs.html:25
#, no-wrap
msgid ""
"double divise(double x, double y) {\n"
"&nbsp;&nbsp;return x / y;\n"
"}"
msgstr ""

#: src/lessons/welcome/MethodsArgs.html:28
#, no-wrap
msgid "double y = divise(3.14 , 1.5);"
msgstr ""

#: src/lessons/welcome/MethodsArgs.html:30
msgid ""
"En Java, il est possible d'avoir plusieurs méthodes du même nom, à condition "
"qu'elles n'aient pas les mêmes paramètres (on dit qu'elles n'ont pas la même "
"<b>signature</b>)."
msgstr ""

#: src/lessons/welcome/MethodsArgs.html:32
#, no-wrap
msgid ""
"int max(int x, int y) {\n"
"&nbsp;&nbsp;if (x > y) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;return x;\n"
"&nbsp;&nbsp;}\n"
"&nbsp;&nbsp;return y;\n"
"}\n"
"int max(int x, int y, int z) {\n"
"&nbsp;&nbsp;if (x > y && x > z) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;return x;\n"
"&nbsp;&nbsp;}\n"
"&nbsp;&nbsp;if (y > z) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;return y;\n"
"&nbsp;&nbsp;}\n"
"&nbsp;&nbsp;return z;\n"
"}"
msgstr ""

#: src/lessons/welcome/MethodsArgs.html:48
msgid ""
"Remarquez que nous avons ici laissé de coté les <tt>else</tt> de chaque "
"alternative. Cela fonctionne tout de même car un <tt>return</tt> interrompt "
"l'exécution de la méthode. Si on arrive à la dernière ligne de <code>max(int,"
"int)</code>, on est donc sur que <code>x&lt;=y</code> car dans le cas "
"contraire, le <tt>return</tt> de la deuxième ligne aurait arrêté l'exécution "
"de la fonction."
msgstr ""

#: src/lessons/welcome/MethodsArgs.html:55
msgid ""
"<a name=\"Objectifs\"> Il s'agit cette fois d'écrire une méthode <code>move"
"(int nbPas, boolean forward)</code> qui avance de <code>nbPas</code> si "
"<code>forward</code> est vrai, et recule d'autant de pas si le booléen est "
"faux. La buggle s'en servira pour retourner sur la ligne du haut. Elle "
"utilisera au passage des méthodes que l'on ne connaît pas encore pour "
"deviner sa position et sa direction actuelles afin de calculer le sens et le "
"nombre de pas à faire (mais ce n'est pas important ici)."
msgstr ""

#: src/lessons/welcome/MethodsArgs.html:66
msgid ""
"Cette fois, il y a un seul monde, et sept buggles. Mais ça ne change pas "
"grand chose pour vous, puisque toutes sont ici régies par le même code."
msgstr ""

#: src/lessons/welcome/MethodsArgs.html:70
msgid ""
"Le code de la méthode à proprement parlé ne devrait pas poser de problème."
msgstr ""

#: src/lessons/welcome/MethodsPicture.html:1
msgid "Dessiner avec méthode"
msgstr ""

#: src/lessons/welcome/MethodsPicture.html:3
msgid ""
"Dans cet exercice, nous allons reproduire un dessin géométrique, que vous "
"pouvez voir en cliquant sur l'onglet \"Objective\"."
msgstr ""

#: src/lessons/welcome/MethodsPicture.html:6
msgid ""
"Votre objectif (ici, et dans tous les programmes bien faits) est d'écrire "
"une méthode <code>run()</code> la plus simple possible. Pour cela, vous "
"veillerez à décomposer le travail à faire en sous-étape, et à faire réaliser "
"chaque sous-étape par une méthode particulière."
msgstr ""

#: src/lessons/welcome/MethodsPicture.html:11
msgid ""
"Si on observe attentivement le modèle à dessiner, on remarque qu'il est "
"composé de quatre formes en sorte de V de couleurs différentes, et à des "
"positions différentes.  Un découpage possible est d'écrire une fonction "
"chargée de faire un V de la couleur indiquée à partir de la position "
"courante. Son prototype peut être :"
msgstr ""

#: src/lessons/welcome/MethodsPicture.html:15
#, no-wrap
msgid "void makeV(Color c)"
msgstr ""

#: src/lessons/welcome/MethodsPicture.html:17
msgid ""
"Le type de données <code>Color</code> représente naturellement une couleur "
"en particulier.  Votre méthode <code>run()</code> invoquera sans doute "
"<code>makeV</code> avec les arguments suivants (une couleur différente à "
"chaque appel) :"
msgstr ""

#: src/lessons/welcome/MethodsPicture.html:21
msgid "Color.yellow"
msgstr ""

#: src/lessons/welcome/MethodsPicture.html:22
msgid "Color.red"
msgstr ""

#: src/lessons/welcome/MethodsPicture.html:23
msgid "Color.blue"
msgstr ""

#: src/lessons/welcome/MethodsPicture.html:24
msgid "Color.green"
msgstr ""

#: src/lessons/welcome/MethodsPicture.html:27
msgid ""
"Dans la méthode <code>makeV()</code>, il faut utiliser la méthode "
"<code>setBrushColor()</code>, qui est prédéfinie dans la buggle, pour "
"changer la couleur du pinceau, ainsi que <code>brushUp()</code> et "
"<code>brushDown()</code> pour lever et baisser le pinceau."
msgstr ""

#: src/lessons/welcome/MethodsPicture.html:31
msgid ""
"Il faudrait également que la méthode <code>makeV()</code> place la buggle en "
"position pour dessiner le prochain V directement."
msgstr ""

#: src/lessons/welcome/MethodsPicture.html:34
msgid ""
"À vous de jouer. La méthode <code>run()</code> ne devrait pas prendre plus "
"de quatre lignes..."
msgstr ""

#: src/lessons/welcome/MethodsPicture2.html:1
msgid "Dessiner avec méthode (en plus grand)"
msgstr "Methodically drawing (only bigger)"

#: src/lessons/welcome/MethodsPicture2.html:3
msgid ""
"Nous allons maintenant reproduire un dessin géométrique plus grand. Encore "
"une fois, vous pouvez voir le modèle en cliquant sur l'onglet \"Objective\"."
msgstr ""
"We will now reproduce an even bigger geometrical drawing. Once again, you "
"can see the model by clicking on the \"Objective\" tab."

#: src/lessons/welcome/MethodsPicture2.html:6
msgid ""
"Vous pouvez bien entendu réutiliser tout le code que vous aviez tapé à "
"l'exercice précédent (sélectionnez l'autre exercice, allez dans le code, "
"sélectionner tout, faites Ctrl-C, revenez dans le code de l'exercice "
"courant, faites Ctrl-V)."
msgstr ""
"You can naturally reuse all the code you typed in previous exercise (select "
"the other exercise, do Ctrl-C, come back to the code of this exercise, do "
"Ctrl-V)."

#: src/lessons/welcome/MethodsPicture2.html:11
msgid ""
"Mais pour que votre méthode <code>run()</code> reste aussi simple que "
"possible, il faudra définir de nouvelles méthodes afin de gérer simplement "
"les repétions du motif. Par exemple, une méthode <code>makePattern()</code> "
"réalisant le motif de l'exercice précédent semble être un bon départ (mais "
"ce n'est sans doute pas suffisant)."
msgstr ""
"But you want to keep your <code>run()</code> as simple as possible. For "
"that, define new methods to deal simply with the repetitions in the pattern. "
"For example, a method <code>makePattern()</code> achieving the pattern of "
"previous example seems to be a good idea (but this may not be enough)."

#: src/lessons/welcome/MethodsPicture2.html:17
msgid ""
"À vous de jouer. La méthode <code>run()</code> ne devrait pas prendre plus "
"de 2 lignes, incluses dans une boucle for..."
msgstr ""
"Why don't you give it a shot? The <code>run()</code> method shouldn't take "
"more than 2 lines (included in a for loop)"

#: src/lessons/welcome/MethodsPicture3.html:1
msgid "Dessiner de plus en plus grand"
msgstr ""

#: src/lessons/welcome/MethodsPicture3.html:3
msgid ""
"Vous vous en doutez, il vous faut encore une fois reproduire un dessin "
"géométrique dont le modèle se trouve dans l'onglet \"Objective\". Comme vous "
"le voyez, il est encore plus grand que le précédent."
msgstr ""

#: src/lessons/welcome/MethodsPicture3.html:7
msgid ""
"Il va donc falloir définir encore plus de méthodes afin de tirer partie des "
"répétitions du motif pour factoriser votre code. Ou alors, il va falloir "
"<i>paramétrer</i> vos fonctions pour réutiliser ce que vous aviez écrit en "
"changant les tailles."
msgstr ""

#: src/lessons/welcome/MethodsPicture3.html:11
#: src/lessons/welcome/Snake.html:47
#: src/lessons/welcome/TraversalByColumn.html:46
#: src/lessons/welcome/TraversalByLine.html:10
#: src/lessons/welcome/TraversalDiagonal.html:8
#: src/lessons/welcome/TraversalZigZag.html:6
msgid "À vous de jouer..."
msgstr ""

#: src/lessons/welcome/BDR.html:1
msgid "Buggle Dance Revolution"
msgstr ""

#: src/lessons/welcome/BDR.html:2
msgid "(BDR)"
msgstr ""

#: src/lessons/welcome/BDR.html:4
msgid ""
"Aujourd'hui est un grand jour : nous allons apprendre à nos buggles à jouer "
"à Dance Revolution, ce jeu très prisé de certains étudiants où le joueur "
"doit bouger sur un tapis prévu à cet effet en fonction des consignes "
"présentées à l'écran en rythme avec la musique. Mais avant cela, nous avons "
"quelques détails à étudier."
msgstr ""

#: src/lessons/welcome/BDR.html:10
msgid "Conditionnelles sans accolades"
msgstr ""

#: src/lessons/welcome/BDR.html:11
msgid ""
"Il y a un détail que nous avons omis à propos de la syntaxe des "
"conditionnelles : si une branche ne contient qu'une seule instruction, les "
"accolades sont optionnelles. Ainsi, les deux extraits suivants sont "
"équivalents:"
msgstr ""

#: src/lessons/welcome/BDR.html:16
#, no-wrap
msgid ""
"if (<b>condition</b>) {\n"
"    <b>quoiFaireSiLaConditionEstVraie();</b>\n"
"} else {\n"
"    <b>quoiFaireSinon();</b>\n"
"}"
msgstr ""

#: src/lessons/welcome/BDR.html:21
#, no-wrap
msgid ""
"if (<b>condition</b>)\n"
"    <b>quoiFaireSiLaConditionEstVraie();</b>\n"
"else\n"
"    <b>quoiFaireSinon();</b>"
msgstr ""

#: src/lessons/welcome/BDR.html:26
msgid ""
"Mais attention, ceci peut être dangereux si on enchaîne les <tt>if</tt> "
"comme dans l'exemple suivant."
msgstr ""

#: src/lessons/welcome/BDR.html:28
#, no-wrap
msgid ""
"if (isOverBaggle())    \n"
"     if (x == 5)\n"
"          turnLeft();\n"
"else\n"
"     turnRight();\n"
"forward();"
msgstr ""

#: src/lessons/welcome/BDR.html:35
msgid ""
"En fait, ça ne tourne pas à droite quand il n'y a pas un baggle par terre ET "
"que x vaut 5, mais quand la buggle a trouvé un baggle, et que x vaut une "
"autre valeur. Autrement dit, la buggle lit le code précédent comme suit "
"(notez que le <tt>else</tt> est décalé vers la droite par rapport à "
"précédemment) :"
msgstr ""

#: src/lessons/welcome/BDR.html:40
#, no-wrap
msgid ""
"if (isOverBaggle())    \n"
"        if (x == 5)\n"
"            turnLeft();\n"
"        else\n"
"            turnRight();\n"
"forward();"
msgstr ""

#: src/lessons/welcome/BDR.html:47
msgid ""
"La première leçon, c'est que l'indentation aide les humains à comprendre, "
"mais elle est sans importance pour la signification du code. On aurait tout "
"aussi bien pu écrire le code suivant et obtenir le même résultat. Mais "
"attention, si on veut qu'un humain puisse relire le code, l'indentation "
"devient très importante voire indispensable. C'est par exemple le cas si "
"votre code doit être relu par un professeur (pour qu'il le note ou pour lui "
"poser une question), ou si vous comptez réutiliser votre code plus tard."
msgstr ""

#: src/lessons/welcome/BDR.html:56
#, no-wrap
msgid "if (isOverBaggle()) if (x == 5) turnLeft(); else turnRight(); forward();"
msgstr ""

#: src/lessons/welcome/BDR.html:58
msgid ""
"La seconde leçon, c'est qu'une branche <tt>else</tt> se raccroche toujours "
"au <tt>if</tt> le plus proche. C'est parfois un peu contre-intuitif, et il "
"est préférable d'ajouter plus d'accolades que nécessaire pour lever toute "
"ambiguïté."
msgstr ""

#: src/lessons/welcome/BDR.html:63
msgid "Enchaînements de conditionnelles"
msgstr ""

#: src/lessons/welcome/BDR.html:65
msgid ""
"Il arrive que l'on veuille demander à la buggle quelque chose similaire à :"
msgstr ""

#: src/lessons/welcome/BDR.html:67
#, no-wrap
msgid ""
"s'il pleut, prend un parapluie; \n"
"si non, s'il fait chaud, prend une bouteille d'eau; \n"
"si non, si nous sommes le 14 juillet, prend un drapeau français"
msgstr ""

#: src/lessons/welcome/BDR.html:71
msgid ""
"Le piège étant que nous voudrions qu'au plus l'une de ces actions soient "
"réalisées. C'est à dire, que s'il pleut un 14 juillet très chaud, on ne veut "
"pas que la buggle sorte avec un parapluie, de l'eau et un drapeau, mais "
"juste avec un parapluie. Le code suivant est donc faux."
msgstr ""

#: src/lessons/welcome/BDR.html:77
#, no-wrap
msgid ""
"if (ilPleut()) {\n"
"  prendreParapluie();\n"
"}\n"
"if (ilFaitChaud()) {\n"
"  prendreDeLEau();\n"
"} \n"
"if (sommes14Juillet()) {\n"
"  prendreDrapeau();\n"
"}"
msgstr ""

#: src/lessons/welcome/BDR.html:87
msgid ""
"En effet, toutes les conditions sont évaluées les unes après les autres, et "
"on risque donc d'aller au défilé un jour de pluie. À la place, il faut donc "
"écrire quelque chose comme :"
msgstr ""

#: src/lessons/welcome/BDR.html:91
#, no-wrap
msgid ""
"if (ilPleut()) {\n"
"  prendreParapluie();\n"
"} else {\n"
"  if (ilFaitChaud()) {\n"
"    prendreDeLEau();\n"
"  } else {\n"
"    if (sommes14Juillet()) {\n"
"      prendreDrapeau();\n"
"    }\n"
"  }\n"
"}"
msgstr ""

#: src/lessons/welcome/BDR.html:103
msgid ""
"Une telle cascade de conditionnelles est un peu difficile à lire, et il est "
"préférable d'omettre les accolades associées aux <tt>else</tt> comme il "
"suit. Il y a même certains langages qui introduisent un mot-clé spécial pour "
"ces <tt>else if</tt> (mais pas Java)."
msgstr ""

#: src/lessons/welcome/BDR.html:108
#, no-wrap
msgid ""
"if (ilPleut()) {\n"
"  prendreParapluie();\n"
"} else if (ilFaitChaud()) {\n"
"  prendreDeLEau();\n"
"} else if (sommes14Juillet()) {\n"
"  prendreDrapeau();\n"
"}"
msgstr ""

#: src/lessons/welcome/BDR.html:117
msgid "Les graffitis dans le monde des buggles"
msgstr ""

#: src/lessons/welcome/BDR.html:119
msgid ""
"Les buggles peuvent écrire des choses par terre dans leur monde. Pour ce "
"faire, elles utilisent les quatre méthodes suivantes:"
msgstr ""

#: src/lessons/welcome/BDR.html:123
msgid ""
"<code>boolean isOverMessage()</code> : renvoie vrai si et seulement s'il y a "
"un message écrit par terre."
msgstr ""

#: src/lessons/welcome/BDR.html:125
msgid ""
"<code>String readMessage()</code> : renvoie le message qu'il y a écrit par "
"terre (s'il y a rien, on obtient une chaîne vide)."
msgstr ""

#: src/lessons/welcome/BDR.html:127
msgid ""
"<code>void writeMessage(String msg)</code> : écrit le message spécifié en "
"argument par terre. S'il y a déjà quelque chose écrit par terre, on ajoute "
"le nouveau message à la fin du précédent."
msgstr ""

#: src/lessons/welcome/BDR.html:131
msgid "<code>void clearMessage()</code> : efface ce qui est écrit par terre."
msgstr ""

#: src/lessons/welcome/BDR.html:136
msgid ""
"<a name=\"Objectifs\"> L'objectif est donc d'organiser une partie de BDR "
"entre les buggles en leur apprenant à bouger en fonction des indications "
"écrites par terre.  Ces indications sont des messages au sol, avec le code "
"suivant:"
msgstr ""

#: src/lessons/welcome/BDR.html:143 src/lessons/welcome/BDR2.html:132
msgid "Indication"
msgstr ""

#: src/lessons/welcome/BDR.html:144 src/lessons/welcome/BDR2.html:133
msgid "Quoi faire"
msgstr ""

#: src/lessons/welcome/BDR.html:145
msgid "Mnémotechnique"
msgstr ""

#: src/lessons/welcome/BDR.html:147 src/lessons/welcome/BDR2.html:135
msgid "R"
msgstr ""

#: src/lessons/welcome/BDR.html:147 src/lessons/welcome/BDR2.html:135
msgid "Tourner à droite et avancer d'une case"
msgstr ""

#: src/lessons/welcome/BDR.html:147
msgid "Right"
msgstr ""

#: src/lessons/welcome/BDR.html:148 src/lessons/welcome/BDR2.html:136
msgid "L"
msgstr ""

#: src/lessons/welcome/BDR.html:148 src/lessons/welcome/BDR2.html:136
msgid "Tourner à gauche et avancer d'une case"
msgstr ""

#: src/lessons/welcome/BDR.html:148
msgid "Left"
msgstr ""

#: src/lessons/welcome/BDR.html:149 src/lessons/welcome/BDR2.html:137
msgid "I"
msgstr ""

#: src/lessons/welcome/BDR.html:149 src/lessons/welcome/BDR2.html:137
msgid "Tourner en sens inverse et avancer d'une case"
msgstr ""

#: src/lessons/welcome/BDR.html:149
msgid "Inverse"
msgstr ""

#: src/lessons/welcome/BDR.html:151 src/lessons/welcome/BDR2.html:139
msgid "A"
msgstr ""

#: src/lessons/welcome/BDR.html:151 src/lessons/welcome/BDR2.html:139
msgid "Avancer d'une case"
msgstr ""

#: src/lessons/welcome/BDR.html:151
msgid "première lettre de l'alphabet"
msgstr ""

#: src/lessons/welcome/BDR.html:152 src/lessons/welcome/BDR2.html:140
msgid "B"
msgstr ""

#: src/lessons/welcome/BDR.html:152 src/lessons/welcome/BDR2.html:140
msgid "Avancer de deux cases"
msgstr ""

#: src/lessons/welcome/BDR.html:152
msgid "deuxième lettre de l'alphabet"
msgstr ""

#: src/lessons/welcome/BDR.html:153 src/lessons/welcome/BDR2.html:141
msgid "C"
msgstr ""

#: src/lessons/welcome/BDR.html:153 src/lessons/welcome/BDR2.html:141
msgid "Avancer de trois cases"
msgstr ""

#: src/lessons/welcome/BDR.html:153
msgid "troisième lettre de l'alphabet"
msgstr ""

#: src/lessons/welcome/BDR.html:155 src/lessons/welcome/BDR2.html:146
msgid "Z"
msgstr ""

#: src/lessons/welcome/BDR.html:155 src/lessons/welcome/BDR2.html:146
msgid "Reculer d'une case"
msgstr ""

#: src/lessons/welcome/BDR.html:155
msgid "à une lettre de la fin de l'alphabet"
msgstr ""

#: src/lessons/welcome/BDR.html:156 src/lessons/welcome/BDR2.html:147
msgid "Y"
msgstr ""

#: src/lessons/welcome/BDR.html:156 src/lessons/welcome/BDR2.html:147
msgid "Reculer de deux cases"
msgstr ""

#: src/lessons/welcome/BDR.html:156
msgid "à deux lettres de la fin de l'alphabet"
msgstr ""

#: src/lessons/welcome/BDR.html:157 src/lessons/welcome/BDR2.html:148
msgid "X"
msgstr ""

#: src/lessons/welcome/BDR.html:157 src/lessons/welcome/BDR2.html:148
msgid "Reculer de trois cases"
msgstr ""

#: src/lessons/welcome/BDR.html:157
msgid "à trois lettres de la fin de l'alphabet"
msgstr ""

#: src/lessons/welcome/BDR.html:160 src/lessons/welcome/BDR2.html:154
msgid "Dans tous les autres cas, il faut s'arrêter."
msgstr ""

#: src/lessons/welcome/BDR.html:162
msgid ""
"Écrivez le code de la dance dans la fonction <code>run()</code> dont le "
"prototype se trouve déjà dans l'éditeur."
msgstr ""

#. *** NOT TRUE !!!, so I decided to remove it ***
#. <p>
#. La première subtilité étant de retrouver l'indication au sol sous
#.    forme de caractère unique que de chaîne de caractères. En effet, les
#.    tests d'égalité entre les chaînes sont un peu compliqués à écrire
#.    (car les chaînes sont des objets).<br>
#.    Java considère que le test <code>("toto" == "toto")</code> est
#.    faux, puisqu'il y a une chaîne à gauche, et une chaîne à droite. Ce
#.    n'est donc pas la même chaîne (le fait qu'elles signifient toutes
#.    les deux la même chose n'entre malheureusement pas en
#.    considération).</p>
#. <p>Au lieu de s'attarder sur ces subtilités sur lesquelles nous aurons
#.    largement le temps de revenir, utilisons <code>char	
#: src/lessons/welcome/BDR.html:167
msgid ""
"Cet exercice peut sembler un peu compliqué, mais il s'agit principalement de "
"traduire le contenu du tableau ci-dessus dans un enchaînement de "
"conditionnelles."
msgstr ""

#: src/lessons/welcome/BDR.html:187
msgid ""
"La première subtilité est que nous utiliserons la méthode <code>char "
"getIndication()</code> à la place de <code>String readMessage()</code>. "
"Cette méthode, qui n'est connue que des buggles des exercice BDR, renvoie le "
"premier caractère du message au sol (ou ' ' s'il n'y a rien d'écrit au sol)."
msgstr ""

#: src/lessons/welcome/BDR.html:194
msgid ""
"L'autre subtilité est de travailler tant qu'on du travail à faire, i.e. tant "
"qu'on a pas trouvé une case n'étant pas décrite dans le tableau. Le plus "
"simple pour cela est de faire une boucle infinie (<code>while (true)</"
"code>), avec tous les tests dans le corps. Si on trouve une case ne "
"répondant à aucune ligne du tableau, on arrêtera tout d'un simple "
"<code>return;</code>."
msgstr ""

#: src/lessons/welcome/BDR.html:201
msgid ""
"Les fonctions dont le type de retour est <tt>void</tt> peuvent contenir des "
"<tt>return</tt> sans valeur associée. Cela interrompt immédiatement leur "
"exécution."
msgstr ""

#: src/lessons/welcome/BDR.html:205
msgid "Trucs et astuces"
msgstr ""

#: src/lessons/welcome/BDR.html:207
msgid ""
"Si vous ne parvenez plus à comprendre pourquoi votre buggle n'exécute pas "
"les pas de danse demandés, essayez d'ajouter <code>brushDown()</code> dans "
"votre méthode. Cela demandera à la buggle de poser un crayon par terre, "
"laissant une trace au sol quand elle avance. Cela devrait vous aider à "
"suivre sa trajectoire, mais pensez à retirer cette appel lorsque vous voulez "
"tester si votre solution marche : on vous demande de faire danser les "
"buggles, pas de dégrader le dance floor."
msgstr ""

#: src/lessons/welcome/BDR.html:216
msgid "Quand votre programme fonctionne enfin, passez à l'exercice suivant."
msgstr ""

#: src/lessons/welcome/BDR2.html:1
msgid "Buggle Dance Revolution 2"
msgstr ""

#: src/lessons/welcome/BDR2.html:2
msgid "(BDR2)"
msgstr ""

#: src/lessons/welcome/BDR2.html:4
msgid ""
"Le BDR, c'est cool, mais c'est un peu le chaos. Tout d'abord, les buggles "
"gigotent en tout sens, et en plus, le code que vous avez écrit pour les "
"faire bouger est très difficile à lire. Voici un nouveau monde de BDR, où "
"les buggles vont faire une gentille petite ronde plus reposante. Nous "
"profiterons de cette accalmie pour nettoyer un peu le code grâce aux "
"nouveaux éléments que nous allons maintenant étudier."
msgstr ""

#: src/lessons/welcome/BDR2.html:12
msgid "Les conditionnels <tt>switch</tt>"
msgstr ""

#: src/lessons/welcome/BDR2.html:14
msgid ""
"Le plus difficile à lire du code précédent est certainement la cascade de "
"conditionnelles. Quelque part dans votre programme, vous avez sans doute "
"écrit quelque chose comme:"
msgstr ""

#: src/lessons/welcome/BDR2.html:18
#, no-wrap
msgid ""
"if (getIndication() == 'R') {\n"
"  turnRight();\n"
"  forward();\n"
"} else if (getIndication() == 'L') {\n"
"  turnLeft();\n"
"  forward();\n"
"} else if (getIndication() == 'U') {\n"
"  turnBack();\n"
"  forward();\n"
"/* d'autres else if */\n"
"} else {\n"
"  return;\n"
"}\n"
msgstr ""

#: src/lessons/welcome/BDR2.html:33
msgid ""
"Quand on relit ce programme, on ne voit pas forcément tout de suite qu'il "
"s'agit simplement d'un choix à 4 branches selon la valeur de getIndication"
"(). Pour faire mieux, on va utiliser la construction <tt>switch</tt>, dont "
"la syntaxe est la suivante:"
msgstr ""

#: src/lessons/welcome/BDR2.html:39
#, no-wrap
msgid ""
"switch (<b>expression</b>) {\n"
"  case <b>premierValeur</b>: \n"
"    <b>queFaireSiExpressionVautPremiereValeur();</b>\n"
"    break;\n"
"  case <b>deuxiemeValeur</b>: \n"
"    <b>queFaireSiExpressionVautDeuxiemeValeur();</b>\n"
"    break;\n"
"  case <b>troisiemeValeur</b>: \n"
"    <b>queFaireSiExpressionVautTroisiemeValeur();</b>\n"
"    break;\n"
"    /* autant de cas sur le même modèle qu'on le souhaite */\n"
"  default: \n"
"    <b>queFaireSiExpressionVautAucuneDesValeursProposees();</b>\n"
"}"
msgstr ""

#: src/lessons/welcome/BDR2.html:54
msgid ""
"Remarquez que chaque branche du <tt>switch</tt> doit être terminée par un "
"<code>break</code>. Si on l'oublie, la machine continue d'exécuter le cas "
"suivant dans la liste quand elle a fini le code du cas où elle a sauté dans "
"le switch. Il y a même quelques très rares cas où ce comportement est "
"pratique."
msgstr ""

#: src/lessons/welcome/BDR2.html:60
msgid ""
"On peut réécrire le code précédent bien plus clairement grâce à la "
"construction <tt>switch</tt> de la façon suivante."
msgstr ""

#: src/lessons/welcome/BDR2.html:63
#, no-wrap
msgid ""
"switch (getIndication()) {\n"
"  case 'R':\n"
"    turnRight(); \n"
"    forward(); \n"
"    break;\n"
"  case 'L':\n"
"    turnLeft();\n"
"    forward(); \n"
"    break;\n"
"  case 'U':\n"
"    turnBack();\n"
"    forward();\n"
"    break;\n"
"  default: \n"
"    return;\n"
"}"
msgstr ""

#: src/lessons/welcome/BDR2.html:81
msgid "Variables partagées par les méthodes"
msgstr ""

#: src/lessons/welcome/BDR2.html:83
msgid ""
"Un autre problème de votre code est qu'il commence à être un peu long pour "
"être dans une seule fonction. On voudrait découper en deux méthodes:"
msgstr ""

#: src/lessons/welcome/BDR2.html:87
msgid "<code>danceOneStep()</code> s'occuperait de faire un pas de danse"
msgstr ""

#: src/lessons/welcome/BDR2.html:88
msgid ""
"<code>run()</code> s'occuperait de faire la danse en entier, c'est à dire de "
"faire des pas de danse tant qu'on est pas arrivé à une case ne demandant pas "
"d'aller plus loin."
msgstr ""

#: src/lessons/welcome/BDR2.html:93
msgid ""
"Le problème est de faire en sorte que <tt>danceOneStep()</tt> prévienne "
"<tt>run()</tt> qu'il n'y a plus de pas possible. La solution la plus simple "
"est encore d'avoir une variable booléenne visible depuis les deux fonctions "
"indiquant s'il reste des pas à faire, ou si on a fini. On écrira donc en "
"dehors de toute méthode"
msgstr ""

#: src/lessons/welcome/BDR2.html:98
#, no-wrap
msgid "boolean moreMusic = true;"
msgstr ""

#: src/lessons/welcome/BDR2.html:100
msgid ""
"Notez que s'il est possible d'écrire des déclarations en dehors des méthode, "
"les instructions doivent obligatoirement être placées dans des méthodes. En "
"Java, on appelle ces variables <i>globales</i> à plusieurs méthodes des "
"<b>champs</b>."
msgstr ""

#: src/lessons/welcome/BDR2.html:105
msgid ""
"Ensuite, la fonction <tt>danseOneStep()</tt> doit être modifiée pour mettre "
"cette valeur à <tt>false</tt> quand il n'y a plus rien à faire. Pour cela, "
"ajoutez simplement <code>moreMusic = false;</code> avant chaque <tt>return</"
"tt>."
msgstr ""

#: src/lessons/welcome/BDR2.html:110
msgid "On peut alors utiliser la fonction <tt>run()</tt> suivante:"
msgstr ""

#: src/lessons/welcome/BDR2.html:111
#, no-wrap
msgid ""
"public void run() {\n"
"  while (moreMusic)\n"
"    danseOneStep();\n"
"}"
msgstr ""

#: src/lessons/welcome/BDR2.html:116
msgid ""
"<a name=\"Objectifs\"> Réécrivez le code des buggles en appliquant les "
"améliorations que nous venons de voir."
msgstr ""

#: src/lessons/welcome/BDR2.html:121
msgid ""
"Vous n'avez pas à écrire la fonction <tt>run</tt>, que les buggles "
"connaissent déjà. Si vous tentez de la définir malgré tout, le compilateur "
"se plaindra de trouver deux définitions de la même fonction, sans se rendre "
"compte qu'il s'agit de la même fonction. Contentez vous de déclarer la "
"variable <tt>moreMusic</tt> et la méthode <tt>danseOneStep()</tt>."
msgstr ""

#: src/lessons/welcome/BDR2.html:128
msgid ""
"Voici les indications au sol à utiliser pour BDR2. Remarquez qu'on peut "
"maintenant avancer la buggle de 6 cases d'un coup."
msgstr ""

#: src/lessons/welcome/BDR2.html:142
msgid "D"
msgstr ""

#: src/lessons/welcome/BDR2.html:142
msgid "Avancer de quatre cases"
msgstr ""

#: src/lessons/welcome/BDR2.html:143
msgid "E"
msgstr ""

#: src/lessons/welcome/BDR2.html:143
msgid "Avancer de cinq cases"
msgstr ""

#: src/lessons/welcome/BDR2.html:144
msgid "F"
msgstr ""

#: src/lessons/welcome/BDR2.html:144
msgid "Avancer de six cases"
msgstr ""

#: src/lessons/welcome/BDR2.html:149
msgid "W"
msgstr ""

#: src/lessons/welcome/BDR2.html:149
msgid "Reculer de quatre cases"
msgstr ""

#: src/lessons/welcome/BDR2.html:150
msgid "V"
msgstr ""

#: src/lessons/welcome/BDR2.html:150
msgid "Reculer de cinq cases"
msgstr ""

#: src/lessons/welcome/BDR2.html:151
msgid "U"
msgstr ""

#: src/lessons/welcome/BDR2.html:151
msgid "Reculer de six cases"
msgstr ""

#: src/lessons/welcome/BDR2.html:156
msgid ""
"Quand votre programme fonctionne de nouveau, passez à l'exercice suivant."
msgstr ""

#: src/lessons/welcome/SlugHunting.html:1
msgid "Chasse à la limace"
msgstr ""

#: src/lessons/welcome/SlugHunting.html:3
msgid ""
"Après toute l'agitation de la dance revolution, nous allons passer à une "
"activité plus calme : la chasse à la limace. Votre buggle a en effet trouvé "
"par hasard la trace d'une limace : une traînée baveuse verte. Si elle "
"parvient à la suivre jusqu'au bout, elle trouvera un baggle représentant la "
"grosse limace si appétissante (pour une buggle)."
msgstr ""

#: src/lessons/welcome/SlugHunting.html:10
msgid ""
"Pour arriver au résultat, le plus simple serait d'avoir une méthode "
"booléenne <tt>isFacingTrail</tt>, qui permettrait de savoir si on est face à "
"une case verte ou non. Bien sûr, si on est face à un mur, elle doit répondre "
"faux. Il faudrait de plus que cette méthode ne modifie ni l'état de la "
"buggle qui l'appelle, ni celui du monde. Une telle méthode est dite <b>sans "
"effet de bord</b>."
msgstr ""

#: src/lessons/welcome/SlugHunting.html:17
msgid ""
"Ensuite, le mieux serait qu'elle prenne en argument la couleur de la piste "
"que l'on veut suivre. Les limaces laissent des traces vertes, mais d'autres "
"proies laissent des traces d'autres couleurs.  En Java, il existe un "
"<i>type</i> <tt>Color</tt> pour désigner les couleurs.  La couleur verte est "
"définie par <code>Color.green</code>."
msgstr ""

#: src/lessons/welcome/SlugHunting.html:23
msgid ""
"Afin de ne pas confondre la partie de la trace à suivre avec celle que votre "
"buggle a déjà suivie, il est conseillé à votre buggle de laisser une trace "
"derrière ses pas.  Pensez à utiliser la méthode <code>brushDown()</code> "
"pour baisser votre crayon (et <code>brushUp()</code> pour le relever)"
msgstr ""

#: src/lessons/welcome/SlugHunting.html:28
msgid ""
"Un buggle peut connaître la couleur de la case sur laquelle il est "
"positionné en utilisant la méthode <code>Color getGroundColor()</code>."
msgstr ""

#: src/lessons/welcome/SlugHunting.html:31
msgid ""
"Enfin, n'oubliez de capturer votre proie une fois que vous l'aurez débusquée "
"(avec <code>pickUpBaggle()</code>)."
msgstr ""

#: src/lessons/welcome/SlugHunting.html:34
msgid ""
"<a name=\"Objectifs\"> Complétez la méthode <code>hunt()</code> qui sera "
"appelée par la méthode <code>run()</code> définissant le comportement par "
"défaut de votre buggle.  La méthode <tt>hunt()</tt> doit utiliser la méthode "
"<code>isFacingTrail()</code> que vous devez également définir."
msgstr ""

#: src/lessons/welcome/Snake.html:1
msgid "Monde de serpents"
msgstr ""

#: src/lessons/welcome/Snake.html:3
msgid ""
"Nous allons maintenant apprendre à la buggle à explorer son monde. Sa "
"position de départ est en bas à gauche, et elle doit visiter toutes les "
"cases juqu'en haut (en coloriant le sol sur son passage).  La boucle "
"principale de la méthode <code>run()</code> (que vous devez écrire)  est de "
"la forme :"
msgstr ""

#: src/lessons/welcome/Snake.html:10
#, no-wrap
msgid ""
" baisser le crayon\n"
" tant que l'on est pas à la position finale\n"
"   avancer comme un serpent\n"
msgstr ""

#: src/lessons/welcome/Snake.html:15
msgid "Le prototype de cette méthode (sa première ligne) doit être :"
msgstr ""

#: src/lessons/welcome/Snake.html:16
#, no-wrap
msgid "public void run()"
msgstr ""

#: src/lessons/welcome/Snake.html:17
msgid ""
"(nous verrons plus tard ce que ce <code>public</code> signifie).  Il faut "
"donc écrire deux méthodes en plus de <code>run()</code>. L'une renvoit un "
"booléen et indique si l'on se trouve à une position finale, tandis que "
"l'autre ne renvoit pas de résultat et avance d'un pas."
msgstr ""

#: src/lessons/welcome/Snake.html:23
msgid "On se trouve sur une position finale si et seulement si :"
msgstr ""

#: src/lessons/welcome/Snake.html:25
msgid "On est face à un mur"
msgstr ""

#: src/lessons/welcome/Snake.html:26
msgid ""
"Il y a un mur au dessus de la buggle. Donc, si la buggle regarde à l'est, il "
"faut vérifier s'il y a un mur à gauche, et si la buggle regarde à l'ouest, "
"il faut vérifier s'il y a un mur à droite."
msgstr ""

#: src/lessons/welcome/Snake.html:29
msgid ""
"On obtient la direction actuelle de la buggle avec la méthode "
"<code>getDirection()</code>, et on sait si elle regarde à l'est avec le test "
"<code>getDirection() == Direction.EAST</code> (WEST pour ouest)."
msgstr ""

#: src/lessons/welcome/Snake.html:32
msgid ""
"Pour la vérification elle-même, rien de magique : il faut se tourner et "
"regarder si on est face à un mur une fois tourné."
msgstr ""

#: src/lessons/welcome/Snake.html:36
msgid ""
"Ensuite un pas de serpent se fait en avancant d'un pas si l'on est pas face "
"à un mur, et en montant à la ligne du dessus sinon (càd, si on regarde à "
"l'ouest face à un mur, il faut tourner à droite, avancer, tourner à droite)."
msgstr ""

#: src/lessons/welcome/Snake.html:40
msgid ""
"Indication: la boucle principale de la méthode <code>run()</code> doit "
"continuer tant que la fonction adéquate renvoie faux. On peut l'écrire de "
"deux façons:"
msgstr ""

#: src/lessons/welcome/Snake.html:42
#, no-wrap
msgid "while (fonctionTest() == false)"
msgstr ""

#: src/lessons/welcome/Snake.html:43
msgid "ou bien"
msgstr ""

#: src/lessons/welcome/Snake.html:44
#, no-wrap
msgid "while (! fonctionTest())"
msgstr ""

#: src/lessons/welcome/Snake.html:45
msgid ""
"Cela fonctionne car le point d'exclamation en java indique une négation "
"booléenne."
msgstr ""

#: src/lessons/welcome/MethodsPicture4.html:1
msgid "Encore des motifs à dessiner"
msgstr ""

#: src/lessons/welcome/MethodsPicture4.html:2
msgid "(et des méthodes à écrire)"
msgstr ""

#: src/lessons/welcome/MethodsPicture4.html:4
msgid ""
"Voici de nouveau un exercice où il faut reproduire un motif donné dans "
"l'onglet \"Objective\"."
msgstr ""

#: src/lessons/welcome/MethodsPicture4.html:7
msgid ""
"Celui-ci est un peu plus difficile que ceux vus précédement. Cherchez les "
"motifs qui se répètent, même si la couleur change, et faites une méthode "
"dessinant chacun d'entre eux."
msgstr ""

#: src/lessons/welcome/MethodsPicture4.html:11
msgid "Bon courage !"
msgstr ""

#: src/lessons/welcome/Array.html:1
msgid "Tricots (et tableaux)"
msgstr ""

#: src/lessons/welcome/Array.html:3
msgid ""
"L'objectif de cet exercice est de reproduire le motif de la première colonne "
"en le décalant d'une case (voir l'onglet Objectives pour plus de détails). "
"La grande différence entre cet exercice et les précédents sur les motifs, "
"c'est qu'il faut maintenant lire (sur la première colonne) le motif "
"souhaité, puis le reproduire ensuite. Il est impossible de faire autrement "
"car votre programme sera exécuté par trois buggles dans trois mondes "
"différents, chacune ayant un motif propre à reproduire."
msgstr ""

#: src/lessons/welcome/Array.html:10
msgid ""
"Une possibilité est de lire la prochaine case, puis d'aller la recopier en "
"position, avant de revenir lire la case suivate, etc. Mais comme vous n'avez "
"pas le droit d'utiliser les méthodes permettant de téléporter la buggle à "
"une case particulière (<code>setPos()</code> et autres), cette façon de "
"faire va être très pénible à mettre en place."
msgstr ""

#: src/lessons/welcome/Array.html:16
msgid ""
"Le plus simple est de stocker l'enchainement de couleurs dans un <b>tableau</"
"b>."
msgstr ""

#: src/lessons/welcome/Array.html:18
msgid "Les tableaux en Java"
msgstr ""

#: src/lessons/welcome/Array.html:19
msgid ""
"Un tableau est une séquence d'emplacements dans lesquels on peut mettre des "
"valeurs de même type (une par emplacement). C'est donc une séquence de cases "
"de même type :"
msgstr ""

#: src/lessons/welcome/Array.html:25
msgid ""
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T&nbsp;&nbsp;&nbsp;&nbsp;"
msgstr ""

#: src/lessons/welcome/Array.html:26
msgid "3"
msgstr ""

#: src/lessons/welcome/Array.html:26
msgid "7"
msgstr ""

#: src/lessons/welcome/Array.html:26
msgid "13"
msgstr ""

#: src/lessons/welcome/Array.html:27
msgid "8"
msgstr ""

#: src/lessons/welcome/Array.html:27
msgid "15"
msgstr ""

#: src/lessons/welcome/Array.html:27
msgid "6"
msgstr ""

#: src/lessons/welcome/Array.html:28
msgid "11"
msgstr ""

#: src/lessons/welcome/Array.html:28
msgid "10"
msgstr ""

#: src/lessons/welcome/Array.html:28
msgid "9"
msgstr ""

#: src/lessons/welcome/Array.html:32
msgid ""
"T est le nom du tableau, T[0] est le nom de la première case, T[1] de la "
"deuxième case, T[2] de la troisième case, etc... Et oui, la première case "
"est T[0] et la dernière case d'un tableau de dimension N est T[N - 1]."
msgstr ""

#: src/lessons/welcome/Array.html:36
msgid ""
"On peut utiliser une variable entière <i>i</i> pour accéder avec T[i] aux "
"cases d'un tableau : lorsque <i>i</i> vaut 0 alors T[i] dénote la case T[0], "
"lorsque <i>i</i> vaut 10, T[i] dénote T[10]. On dit alors que <i>i</i> est "
"un <b>indice</b> dans le tableau T ."
msgstr ""

#: src/lessons/welcome/Array.html:41
msgid "Remplissage d'un tableau"
msgstr ""

#: src/lessons/welcome/Array.html:42
msgid ""
"Supposons que <code>T</code> soit un tableau de 10 éléments entiers.  On "
"peut alors le remplir de la manièere suivante :"
msgstr ""

#: src/lessons/welcome/Array.html:45
#, no-wrap
msgid ""
"for (int i = 0; i&lt;10; i++) {\n"
"   T[i] = 3;\n"
"}\n"
msgstr ""

#: src/lessons/welcome/Array.html:50
msgid "<code>T[i]</code> s'utilise comme une variable. On peut l'affecter :"
msgstr ""

#: src/lessons/welcome/Array.html:51
#, no-wrap
msgid "T[i] = 78;"
msgstr ""

#: src/lessons/welcome/Array.html:53
msgid "On peut lire sa valeur :"
msgstr ""

#: src/lessons/welcome/Array.html:54
#, no-wrap
msgid "x = T[i];"
msgstr ""

#: src/lessons/welcome/Array.html:56
msgid "On peut tester cette valeur :"
msgstr ""

#: src/lessons/welcome/Array.html:58
#, no-wrap
msgid ""
"if (T[i] > 0 ) {\n"
"    // instructions...\n"
"}\n"
msgstr ""

#: src/lessons/welcome/Array.html:63
msgid "Déclaration d'un tableau"
msgstr ""

#: src/lessons/welcome/Array.html:64
msgid "Un tableau se déclare de la manière suivante :"
msgstr ""

#: src/lessons/welcome/Array.html:65
#, no-wrap
msgid "int[] T;"
msgstr ""

#: src/lessons/welcome/Array.html:67
msgid ""
"<code>int</code> indique que les éléments du tableau <code>T</code> sont de "
"type entier est le nom du tableau, <code>[]</code> indique qu'il s'agit d'un "
"tableau. On peut aussi écrire cette déclaration de la manière suivante. Les "
"deux écritures sont syntaxiquement équivalente, mais la première est souvent "
"préférée en Java."
msgstr ""

#: src/lessons/welcome/Array.html:72
#, no-wrap
msgid "int T[];"
msgstr ""

#: src/lessons/welcome/Array.html:74
msgid "Allocation d'un tableau"
msgstr ""

#: src/lessons/welcome/Array.html:76
msgid ""
"Déclarer un tableau <code>T</code> nous réserve juste le nom <code>T</code> "
"pour l'utiliser plus tard. Mais le tableau n'est pas initialisé : il n'a pas "
"de valeur. Que voudrait dire <code>T[5]</code> si nous n'avons pas encore "
"dit que <code>T</code> est un tableau d'au moins 5 éléments ?"
msgstr ""

#: src/lessons/welcome/Array.html:81
msgid "Avant tout, il faut donc lui affecter une valeur à <code>T</code>:"
msgstr ""

#: src/lessons/welcome/Array.html:82
#, no-wrap
msgid "T = new int[10];"
msgstr ""

#: src/lessons/welcome/Array.html:83
msgid ""
"<code>new</code> indique qu'il faut créer quelque chose, et <code>int[10]</"
"code> indique qu'il s'agit d'un tableau de 10 valeur entières. En réponse, "
"un tableau d'entiers de longueur 10 est crée en mémoire, et la variable "
"<code>T</code> référence ce tableau."
msgstr ""

#: src/lessons/welcome/Array.html:88
msgid ""
"La taille d'un tableau est fixée et ne peut plus être changée après la "
"création du tableau. Pour connapitre la taille d'un tableau <code>T</code>, "
"on peut consulter la valeur de la variable <code>T.length</code>."
msgstr ""

#: src/lessons/welcome/Array.html:93
msgid "On ne peut pas écrire :"
msgstr ""

#: src/lessons/welcome/Array.html:94
#, no-wrap
msgid "int T[10]; // FAUX !!!"
msgstr ""

#: src/lessons/welcome/Array.html:95
msgid ""
"Il faut absolument utiliser l'instruction <code>new</code>. Par contre, on "
"peut très bien donner la dimension par une variable <code>i</code>."
msgstr ""

#: src/lessons/welcome/Array.html:97
#, no-wrap
msgid "T = new int[i];"
msgstr ""

#: src/lessons/welcome/Array.html:98
msgid ""
"Dans ce cas, la taille du tableau sera la valeur de <code>i</code> <b>au "
"moment où on a fait le</b> <code>new</code>. Si <code>i</code> change après "
"coup, cela ne modifie pas la taille du tableau."
msgstr ""

#: src/lessons/welcome/Array.html:102
msgid "Déclaration et allocation"
msgstr ""

#: src/lessons/welcome/Array.html:103
#, no-wrap
msgid "int[] T = new int[10];"
msgstr ""

#: src/lessons/welcome/Array.html:105
msgid "On déclare et alloue le tableau en une seule ligne."
msgstr ""

#: src/lessons/welcome/Array.html:107
msgid "Déclaration et initialisation"
msgstr ""

#: src/lessons/welcome/Array.html:108
#, no-wrap
msgid "int[] T = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };"
msgstr ""

#: src/lessons/welcome/Array.html:110
msgid ""
"On déclare, alloue et initialise le tableau en une seule ligne. Pour "
"connaître la taille du tableau à allouer, le compilateur compte les valeurs "
"données.  Ce code est équivalent à :"
msgstr ""

#: src/lessons/welcome/Array.html:114
#, no-wrap
msgid ""
"int[] T = new int[10];\n"
"T[0] = 1;\n"
"T[1] = 2;\n"
"...\n"
"T[9] = 10;\n"
msgstr ""

#: src/lessons/welcome/Array.html:121
msgid "C'est aussi équivalent au code :"
msgstr ""

#: src/lessons/welcome/Array.html:123
#, no-wrap
msgid ""
"int[] T = new int[10];\n"
"for (int i=0; i&lt;T.length; i++) {\n"
"  T[i] = i+1;\n"
"}\n"
msgstr ""

#: src/lessons/welcome/Array.html:129
msgid "Tableaux et paramètres de méthode"
msgstr ""

#: src/lessons/welcome/Array.html:130
msgid ""
"On peut tout à fait passer un tableau en paramètre d'une méthode. La méthode "
"doit l'indiquer dans son prototype de la façon suivante:"
msgstr ""

#: src/lessons/welcome/Array.html:132
#, no-wrap
msgid ""
"void maMethode(int[] valeurs) {\n"
"  // faire quelque chose\n"
"}"
msgstr ""

#: src/lessons/welcome/Array.html:136
msgid "Coté appelant, c'est aussi simple :"
msgstr ""

#: src/lessons/welcome/Array.html:138
#, no-wrap
msgid ""
"int[] tab = new int[10];\n"
"// initialiser les valeurs\n"
"maMethode(tab);\n"
msgstr ""

#: src/lessons/welcome/Array.html:143
msgid ""
"On peut également avoir des méthodes renvoyant des tableaux en résultat :"
msgstr ""

#: src/lessons/welcome/Array.html:144
#, no-wrap
msgid ""
"int[] autreMethode() {\n"
"  int[] resultat = new int[10];\n"
"  // faire quelque chose\n"
"  return resultat;\n"
"}"
msgstr ""

#: src/lessons/welcome/Array.html:151
msgid ""
"La méthode <code>run()</code> que vous devez écrire doit commencer par "
"déclarer un tableau de couleurs (<code>Color[]</code>) et l'allouer. "
"Attention, le premier monde est de taille 6x6, mais ce n'est pas le cas des "
"autres. Utilisez donc la méthode <code>getWorldHeight()</code> pour "
"retrouver le nombre de lignes du monde actuel."
msgstr ""

#: src/lessons/welcome/Array.html:157
msgid ""
"Une fois le tableau alloué, il faut le remplir. Pour chaque case de la "
"colonne, lisez la couleur du sol (avec <code>getGroundColor()</code>), et "
"stockez le résultat de cette méthode dans la bonne case du tableau."
msgstr ""

#: src/lessons/welcome/Array.html:161
msgid ""
"Une fois le tableau initialisé, il faut répliquer le motif sur toutes les "
"colonnes, par exemple en exécutant <code>getWorldWidth()</code> fois une "
"méthode écrite tout exprès."
msgstr ""

#: src/lessons/welcome/Array2.html:1
msgid "Tricots, tableaux et modulos"
msgstr ""

#: src/lessons/welcome/Array2.html:3
msgid ""
"Cet exercice ressemble au précédent : il faut reproduire le motif de "
"couleurs de la première colonne dans les colonnes suivantes."
msgstr ""

#: src/lessons/welcome/Array2.html:6
msgid ""
"La première différence est que le monde est entouré d'un mur : il faut donc "
"modifier légèrement les parcours pour s'assurer que la buggle ne se cogne "
"pas sur les bords. Le plus simple est de traiter la première case de la "
"colonne en dehors de la boucle <code>for</code> (avant la boucle), et faire "
"seulement <code>getWorldHeight()-1</code> pas dans la boucle."
msgstr ""

#: src/lessons/welcome/Array2.html:12
msgid ""
"La seconde différence est que le décalage à effectuer entre les colonnes "
"n'est pas fixe, mais écrit sur la première case de chaque colonne. Pour "
"obtenir l'information sous forme d'un entier, on peut utiliser:"
msgstr ""

#: src/lessons/welcome/Array2.html:15
#, no-wrap
msgid "int offset = Integer.parseInt(readMessage())"
msgstr ""

#: src/lessons/welcome/Array2.html:17
msgid ""
"<code>readMessage()</code> lit l'indication au sol sous forme d'une chaine "
"de caractères, tandis que <code>Integer.parseInt()</code> transforme une "
"chaine de caractères en entiers en la <i>lisant</i>."
msgstr ""

#: src/lessons/welcome/Array2.html:21
msgid ""
"Ensuite, pour trouver la bonne couleur à utiliser, le plus simple est "
"d'utiliser l'opérateur <code>%</code> (modulo). Par exemple, <code>(i + 5) % "
"taille</code> permet de trouver la <code>i</code>ieme case d'un tableau de "
"taille <code>taille</code> quand on applique un décalage de <code>5</code> "
"cases."
msgstr ""

#: src/lessons/welcome/TraversalByColumn.html:1
msgid "Parcours colonne par colonne"
msgstr ""

#: src/lessons/welcome/TraversalByColumn.html:3
msgid ""
"L'objectif de cette série d'exercices est de faire parcourir le monde à la "
"buggle.  Elle doit de plus numéroter les différentes cases rencontrées pour "
"montrer son ordre de parcours."
msgstr ""

#: src/lessons/welcome/TraversalByColumn.html:7
msgid ""
"La boucle principale de la méthode <code>run()</code> (que vous devez "
"écrire)  est de la forme :"
msgstr ""

#: src/lessons/welcome/TraversalByColumn.html:10
#, no-wrap
msgid ""
" tant que l'on n'est pas à la position finale\n"
"   aller à la prochaine position\n"
"   marquer le numéro de case au sol \n"
msgstr ""

#: src/lessons/welcome/TraversalByColumn.html:15
msgid ""
"À la différence des exercices vus jusque là, nous n'allons pas utiliser les "
"méthodes <code>forward()</code>, <code>backward()</code> et autres, mais "
"nous allons calculer les coordonnées de la prochaine position de la buggle, "
"et utiliser la méthode <code>setPos(int, int)</code> pour <i>téléporter</i> "
"la buggle directement à cette position. Par exemple, <code>setPos(3, 5)</"
"code> téléporte la buggle sur la case où x=3 et y=5."
msgstr ""

#: src/lessons/welcome/TraversalByColumn.html:22
msgid ""
"Le premier objectif est donc d'écrire une fonction booléenne indiquant si la "
"buggle a atteint la position finale ou non, càd si elle est arrivée en bas à "
"droite du monde.  Vous utiliserez pour cela les méthodes <code>getWorldWidth"
"()</code> et <code>getWorldHeight()</code> qui retournent respectivement la "
"largeur et la hauteur du monde.  Votre test est de comparer les coordonnées "
"actuelles de votre buggle (que vous pouvez retrouver avec les méthodes "
"<code>getX()</code> et <code>getY()</code>) aux dimensions du monde."
msgstr ""

#: src/lessons/welcome/TraversalByColumn.html:28
msgid ""
"Attention, la première ligne et la première colonne sont numérotées 0 et non "
"1..."
msgstr ""

#: src/lessons/welcome/TraversalByColumn.html:30
msgid ""
"Ensuite, il faut écrire le code pour aller à la position suivante. Dans cet "
"exercice, il faut parcourir le monde colonne par colonne. Donc, si on est "
"tout en bas d'une colonne, il faut aller en haut de la colonne suivante et "
"sinon, il faut aller à la case du dessous."
msgstr ""

#: src/lessons/welcome/TraversalByColumn.html:34
msgid ""
"À ce point, vous pouvez lancer votre programme pour vérifier que la buggle "
"parcours bien le monde dans l'ordre souhaité, et s'arrête bien quand il "
"faut. Pensez à utiliser le bouton <b>stop</b> pour arrêter l'exécution si "
"votre programme ne se termine pas correctement."
msgstr ""

#: src/lessons/welcome/TraversalByColumn.html:38
msgid ""
"Il est temps d'écrire au sol les numéros de case. Pour cela, vous aurez "
"besoin d'un compteur initialisé à zéro au début de votre méthode <code>run()"
"</code>, et incrémenté de un à chaque pas (par exemple avec <code>cpt++;</"
"code>). Ensuite, il faut écrire la valeur de ce compteur au sol à chaque "
"pas, par exemple avec <code>writeMessage(cpt);</code>."
msgstr ""

#: src/lessons/welcome/TraversalByColumn.html:43
msgid ""
"Il est sans doute nécessaire d'écrire la valeur de la première ou dernière "
"case en dehors de la boucle principale, selon que vous utilisez un "
"<code>while {}</code> ou un <code>do {} while</code>..."
msgstr ""

#: src/lessons/welcome/TraversalByLine.html:1
msgid "Parcours ligne par ligne"
msgstr ""

#: src/lessons/welcome/TraversalByLine.html:3
msgid ""
"Il faut encore faire parcourir le monde à la buggle en numérotant les cases "
"au passage, mais l'objectif de cet exercice est d'écrire un parcours ligne "
"par ligne. La plupart du code écrit à l'exercice précédent reste utilisable, "
"mais la méthode calculant les prochaines coordonnées de la buggle doit être "
"modifiée en conséquence : si l'on est tout à droite d'une ligne, il faut "
"aller au début de la ligne précédente. Si non, il faut aller sur la case à "
"droite."
msgstr ""

#: src/lessons/welcome/TraversalDiagonal.html:1
msgid "Parcours en diagonale"
msgstr ""

#: src/lessons/welcome/TraversalDiagonal.html:3
msgid ""
"Cette fois, il faut parcourir le monde en diagonale. Regardez le monde "
"objectif pour voir les détails de l'ordre de parcours demandé."
msgstr ""

#: src/lessons/welcome/TraversalDiagonal.html:6
msgid ""
"Il vous est recommandé d'utiliser une variable entière <code>diag</code> "
"conservant le numéro de la diagonale que la buggle est en train de parcourir."
msgstr ""

#: src/lessons/welcome/TraversalZigZag.html:1
msgid "Parcours en zig-zag"
msgstr ""

#: src/lessons/welcome/TraversalZigZag.html:3
msgid ""
"Cette fois, il faut parcourir le monde en zig-zag. Regardez le monde "
"objectif pour voir les détails de l'ordre de parcours demandé."
msgstr ""

#: src/lessons/maze/Main.html:1
msgid "Labyrinthes"
msgstr ""

#: src/lessons/maze/Main.html:3
msgid ""
"Cette leçon propose divers exercices à propos des labyrinthes dans le monde "
"des buggles."
msgstr ""

#: src/lessons/maze/RandomMouseMaze.html:1
msgid "La souris folle"
msgstr ""

#: src/lessons/maze/RandomMouseMaze.html:3
msgid ""
"La journée de votre buggle commence mal. Il n'a pas eu de chance. Il est "
"tombé dans un piège.  Aidez le à sortir de ce labyrinthe."
msgstr ""

#: src/lessons/maze/RandomMouseMaze.html:10
msgid ""
"Nous allons profiter du fait que le labyrinthe ne soit pas trop grand pour "
"écrire l'algorithme le plus bête possible.  Cet algorithme repose sur le "
"hasard et est très inefficace."
msgstr ""

#: src/lessons/maze/RandomMouseMaze.html:15
msgid ""
"Tant que notre buggle n'a pas trouvé la sortie, il doit progresser de la "
"façon suivante : Si il se trouve à une jonction, il doit prendre une "
"décision au hasard (avancer si il le peut, ou bien tourner à droite ou bien "
"tourner à gauche).  Si ce n'est pas une jonction, il doit avancer si il le "
"peut, sinon il doit tourner de manière aléatoire."
msgstr ""

#: src/lessons/maze/RandomMouseMaze.html:22
msgid ""
"<a name=\"Objectifs\"> L'objectif de cet exercice est d'écrire un algorithme "
"permettant à votre buggle de sortir du labyrinthe. Pensez à faire prendre le "
"baggle à votre buggle avant la fin de votre programme."
msgstr ""

#: src/lessons/maze/RandomMouseMaze.html:29
msgid ""
"Le corps de la méthode <code>void run()</code> vous est fourni. Il vous est "
"demandé d'implémenter les méthodes qui vont aider votre buggle."
msgstr ""

#: src/lessons/maze/RandomMouseMaze.html:33
msgid ""
"Ecrivez la méthode <code>void turnRandomly()</code> que votre buggle "
"utiliser pour tourner au hasard à droite ou à gauche. Vous pouvez vous aidez "
"de la méthode <code>random2()</code> qui retourne 0 ou 1 de manière "
"aléatoire."
msgstr ""

#: src/lessons/maze/RandomMouseMaze.html:37
msgid ""
"Ecrivez la méthode <code>void takeRandomDirection()</code> pour que votre "
"buggle prenne une décision (avancer, tourner à droite, tourner à gauche) au "
"hasard.  Vous pouvez utiliser la méthode <code>random3()</code> qui retourne "
"de manière aléatoire la valeur 0, 1 ou 2."
msgstr ""

#: src/lessons/maze/RandomMouseMaze.html:42
msgid ""
"Ecrivez la méthode <code>boolean atAJunction()</code> qui indique à votre "
"buggle si il se trouve à une jonction (autrement dit, si il a la possibilité "
"de tourner à droite ou à gauche)."
msgstr ""

#: src/lessons/maze/WallFollowerMaze.html:1
msgid "Longer les murs"
msgstr ""

#: src/lessons/maze/WallFollowerMaze.html:3
msgid ""
"Cette fois-ci le labyrinthe est beaucoup plus compliqué. Le hasard ne sera "
"pas suffisant, il va falloir être intelligent !"
msgstr ""

#: src/lessons/maze/WallFollowerMaze.html:5
msgid ""
"Heureusement, ce labyrinthe est plus simple qu'il n'y paraît, il ne contient "
"aucun îlot qui risquerait de faire tourner en rond notre buggle. Pour sortir "
"de ce genre de labyrinthe, il suffit à votre buggle de longer un mur.  De "
"façon imagée votre buggle doit poser une de ses pattes sur un mur (celui à "
"sa droite, ou celui à sa gauche). Et, tout en essayant de garder sa patte "
"poser sur ce mur, votre buggle doit avancer jusqu'à ce qu'il trouve la "
"sortie du labyrinthe et ce biscuit qu'il apprécie tant."
msgstr ""

#: src/lessons/maze/WallFollowerMaze.html:11
msgid ""
"<a name=\"Objectifs\"> L'objectif de cet exercice est d'écrire un algorithme "
"permettant à votre buggle de sortir du labyrinthe."
msgstr ""

#: src/lessons/maze/WallFollowerMaze.html:16
msgid ""
"Avant d'écrire votre programme, choisissez une direction (droite ou gauche). "
"C'est les murs de ce côté que votre buggle suivra."
msgstr ""

#: src/lessons/maze/WallFollowerMaze.html:18
msgid ""
"Ecrivez une méthode <code>void putHandOnSideWall()</code> qui déplacera "
"votre buggle afin qu'il s'appuie sur le mur du côté que vous avez choisi. "
"Pensez à faire pivoter votre buggle pour qu'il ne regarde plus le mur."
msgstr ""

#: src/lessons/maze/WallFollowerMaze.html:21
msgid ""
"Ecrivez une méthode <code>void keepHandOnSideWall()</code> qui fait avancer "
"votre buggle d'une case tout en gardant la patte sur le mur du côté choisi. "
"Vous devez donc vous assurez que votre buggle garde toujours la patte sur le "
"mur et également qu'il ne risque pas de percuter un mur."
msgstr ""

#: src/lessons/maze/WallFollowerMaze.html:24
msgid ""
"Enfin, écrivez la méthode <code>void run()</code> qui cherche le mur le plus "
"proche (méthode <code>void putHandOnSideWall()</code>), puis parcours le "
"labyrinthe (méthode <code>void keepHandOnSideWall()</code>) jusqu'à trouver "
"la sortie et le biscuit. Enfin il ne faut pas oubliez de prendre la baggle."
msgstr ""

#: src/lessons/maze/PledgeMaze.html:1
msgid "Perdu au milieu des îlots"
msgstr ""

#: src/lessons/maze/PledgeMaze.html:3
msgid ""
"Encore un labyrinthe, mais pourquoi tant de haine envers ce pauvre buggle ?"
msgstr ""

#: src/lessons/maze/PledgeMaze.html:6
msgid ""
"Tous les labyrinthes disjoints peuvent être résolus par la méthode "
"précédente (<i>wall follower algorithm</i>) si l'entrée et la sortie du "
"labyrinthe se trouve sur les murs extérieurs du labyrinthe. Si par contre, "
"le buggle débute à l'intérieur du labyrinthe, il peut exister une section du "
"labyrinthe qui soit disjointe de la sortie, et il se peut que le buggle "
"suive indéfiniment les murs de cette section."
msgstr ""

#: src/lessons/maze/PledgeMaze.html:8
msgid ""
"C'est pourquoi si l'on applique la même stratégie que précédemment, alors le "
"buggle tourne en rond. En effet, ce labyrinthe contient des îlots, et notre "
"buggle ne débute pas le long d'un mur extérieur."
msgstr ""

#: src/lessons/maze/PledgeMaze.html:11
msgid ""
"L'algorithme de Pledge (nommé d'après Jon Pledge d'Exeter) peut résoudre ce "
"labyrinthe."
msgstr ""

#: src/lessons/maze/PledgeMaze.html:13
msgid ""
"Cet algorithme est une version modifiée l'algorithme précédent et a été "
"conçu pour éviter les obstacles. Il nécessite de choisir de manière "
"arbitraire une direction vers laquelle le buggle se dirigera. Quand un "
"obstacle est rencontré, une patte (disons la patte de droite) est gardée le "
"long des obstacles tandis que les virages sont comptabilisés. Quand le "
"buggle est face à nouveau à la direction originale, et que la somme des "
"virages est égale à 0, le buggle quitte l'obstacle et continue de se "
"déplacer dans sa direction d'origine."
msgstr ""

#. >
#: src/lessons/maze/PledgeMaze.html:15
msgid ""
"Il faut remarquer que l'utilisation de la \"somme des virages\" à la place "
"de la \"direction courante\" permet à l'algorithme d'éviter les pièges tel "
"que les formes en \"G\" majuscule.  Note that the use of \"total turning\" "
"rather than just the \"current direction\" allows the algorithm to avoid "
"traps shaped like an upper case \"G\". If one proceeds left into the trap, "
"one gets turned around a full 360 degrees by the walls. A naive \"current "
"direction\" algorithm gets into a limit cycle as it leaves the lower "
"rightmost wall heading left and runs into the curved section on the left "
"again. The Pledge algorithm does not leave the rightmost wall due to the "
"total turning not being zero at that point. It follows the wall all the way "
"around, finally leaving it heading left on the bottom outside -->"
msgstr ""

#: src/lessons/maze/PledgeMaze.html:22
msgid ""
"<a name=\"Objectifs\"> L'objectif de cet exercice est d'écrire une "
"implémentation de l'algorithme de Pledge qui permettra à votre buggle de "
"sortir du labyrinthe."
msgstr ""

#: src/lessons/maze/PledgeMaze.html:28
msgid ""
"Reprenez la méthode <code>void keepHandOnSideWall()</code> de l'exercice "
"précédent. Modifiez cette méthode pour compter les virages pris par votre "
"buggle (+1 lorsqu'il a tourné à droite par rapport à son origine, -1 "
"lorsqu'il a tourné à gauche). Pour comptabiliser vous aurez besoin d'ajouter "
"une variable <code>angleSum</code> de type entière à votre programme."
msgstr ""

#: src/lessons/maze/PledgeMaze.html:30
msgid ""
"Ecrivez une méthode <code>boolean isChosenDirectionFree()</code> vous "
"indiquant si la direction arbitraire que vous avez choisie est libre "
"(autrement dit que vous pouvez vous déplacer dans cette direction). Pour "
"cela, il est nécessaire d'utiliser une variable de type <code>Direction</"
"code> pour conserver la direction que vous avez choisie (par exemple "
"<code>Direction.NORTH</code>). Vous pouvez connaître la direction vers "
"laquelle se dirige votre buggle en utilisant la méthode <code>Direction "
"getDirection()</code>. Vous pouvez diriger (sans se déplacer) votre buggle "
"dans une direction en utilisant la méthode <code>void setDirection(Direction "
"d)</code>. Pensez à mémoriser (dans une variable) pour la récupérer plus "
"tard, la direction courante de votre buggle avant de vérifier si votre "
"buggle peut se diriger vers sa direction de prédilection."
msgstr ""

#: src/lessons/maze/PledgeMaze.html:32
msgid ""
"Ecrivez la méthode <code>void run()</code>. Cette méthode doit définir la "
"direction de prédilection de votre buggle en utilisant la variable que vous "
"avez définie à cet effet. Puis, elle doit diriger votre buggle dans cette "
"direction. Ensuite, vous devez écrire la boucle principale de l'algorithme.  "
"Autrement dit, tant que votre buggle n'a pas trouvé son biscuit, il faut "
"avancer jusqu'à un obstacle tant la direction de prédilection. Quand un "
"obstacle est rencontré, il faut garder la patte sur un mur (<code>void "
"keepHandOnSideWall()</code>) tant que la somme des virages n'est pas nulle "
"et que la direction de prédilection n'est pas libre et que votre buggle "
"n'est pas au dessus de son biscuit."
msgstr ""

#: src/lessons/maze/PledgeMaze.html:35
msgid ""
"Pensez à faire prendre le baggle à votre buggle avant la fin de votre "
"programme."
msgstr ""
